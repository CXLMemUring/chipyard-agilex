// UAB_RV_System_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.1 720

`timescale 1 ps / 1 ps
module UAB_RV_System_mm_interconnect_0 (
		input  wire [3:0]   UABChip_0_axi4_mem_master_awid,                                        //                                       UABChip_0_axi4_mem_master.awid
		input  wire [31:0]  UABChip_0_axi4_mem_master_awaddr,                                      //                                                                .awaddr
		input  wire [7:0]   UABChip_0_axi4_mem_master_awlen,                                       //                                                                .awlen
		input  wire [2:0]   UABChip_0_axi4_mem_master_awsize,                                      //                                                                .awsize
		input  wire [1:0]   UABChip_0_axi4_mem_master_awburst,                                     //                                                                .awburst
		input  wire [0:0]   UABChip_0_axi4_mem_master_awlock,                                      //                                                                .awlock
		input  wire [3:0]   UABChip_0_axi4_mem_master_awcache,                                     //                                                                .awcache
		input  wire [2:0]   UABChip_0_axi4_mem_master_awprot,                                      //                                                                .awprot
		input  wire [3:0]   UABChip_0_axi4_mem_master_awqos,                                       //                                                                .awqos
		input  wire         UABChip_0_axi4_mem_master_awvalid,                                     //                                                                .awvalid
		output wire         UABChip_0_axi4_mem_master_awready,                                     //                                                                .awready
		input  wire [31:0]  UABChip_0_axi4_mem_master_wdata,                                       //                                                                .wdata
		input  wire [3:0]   UABChip_0_axi4_mem_master_wstrb,                                       //                                                                .wstrb
		input  wire         UABChip_0_axi4_mem_master_wlast,                                       //                                                                .wlast
		input  wire         UABChip_0_axi4_mem_master_wvalid,                                      //                                                                .wvalid
		output wire         UABChip_0_axi4_mem_master_wready,                                      //                                                                .wready
		output wire [3:0]   UABChip_0_axi4_mem_master_bid,                                         //                                                                .bid
		output wire [1:0]   UABChip_0_axi4_mem_master_bresp,                                       //                                                                .bresp
		output wire         UABChip_0_axi4_mem_master_bvalid,                                      //                                                                .bvalid
		input  wire         UABChip_0_axi4_mem_master_bready,                                      //                                                                .bready
		input  wire [3:0]   UABChip_0_axi4_mem_master_arid,                                        //                                                                .arid
		input  wire [31:0]  UABChip_0_axi4_mem_master_araddr,                                      //                                                                .araddr
		input  wire [7:0]   UABChip_0_axi4_mem_master_arlen,                                       //                                                                .arlen
		input  wire [2:0]   UABChip_0_axi4_mem_master_arsize,                                      //                                                                .arsize
		input  wire [1:0]   UABChip_0_axi4_mem_master_arburst,                                     //                                                                .arburst
		input  wire [0:0]   UABChip_0_axi4_mem_master_arlock,                                      //                                                                .arlock
		input  wire [3:0]   UABChip_0_axi4_mem_master_arcache,                                     //                                                                .arcache
		input  wire [2:0]   UABChip_0_axi4_mem_master_arprot,                                      //                                                                .arprot
		input  wire [3:0]   UABChip_0_axi4_mem_master_arqos,                                       //                                                                .arqos
		input  wire         UABChip_0_axi4_mem_master_arvalid,                                     //                                                                .arvalid
		output wire         UABChip_0_axi4_mem_master_arready,                                     //                                                                .arready
		output wire [3:0]   UABChip_0_axi4_mem_master_rid,                                         //                                                                .rid
		output wire [31:0]  UABChip_0_axi4_mem_master_rdata,                                       //                                                                .rdata
		output wire [1:0]   UABChip_0_axi4_mem_master_rresp,                                       //                                                                .rresp
		output wire         UABChip_0_axi4_mem_master_rlast,                                       //                                                                .rlast
		output wire         UABChip_0_axi4_mem_master_rvalid,                                      //                                                                .rvalid
		input  wire         UABChip_0_axi4_mem_master_rready,                                      //                                                                .rready
		input  wire         clk_clk_clk,                                                           //                                                         clk_clk.clk
		input  wire         mem_pll_outclk0_clk,                                                   //                                                 mem_pll_outclk0.clk
		input  wire         ddr3_hps_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset, // ddr3_hps_f2h_sdram0_data_translator_reset_reset_bridge_in_reset.reset
		input  wire         UABChip_0_reset_reset_bridge_in_reset_reset,                           //                           UABChip_0_reset_reset_bridge_in_reset.reset
		output wire [25:0]  ddr3_hps_f2h_sdram0_data_address,                                      //                                        ddr3_hps_f2h_sdram0_data.address
		output wire         ddr3_hps_f2h_sdram0_data_write,                                        //                                                                .write
		output wire         ddr3_hps_f2h_sdram0_data_read,                                         //                                                                .read
		input  wire [127:0] ddr3_hps_f2h_sdram0_data_readdata,                                     //                                                                .readdata
		output wire [127:0] ddr3_hps_f2h_sdram0_data_writedata,                                    //                                                                .writedata
		output wire [8:0]   ddr3_hps_f2h_sdram0_data_burstcount,                                   //                                                                .burstcount
		output wire [15:0]  ddr3_hps_f2h_sdram0_data_byteenable,                                   //                                                                .byteenable
		input  wire         ddr3_hps_f2h_sdram0_data_readdatavalid,                                //                                                                .readdatavalid
		input  wire         ddr3_hps_f2h_sdram0_data_waitrequest                                   //                                                                .waitrequest
	);

	wire    [0:0] uabchip_0_axi4_mem_master_translator_m0_ruser;                // UABChip_0_axi4_mem_master_agent:ruser -> UABChip_0_axi4_mem_master_translator:m0_ruser
	wire    [0:0] uabchip_0_axi4_mem_master_translator_m0_wuser;                // UABChip_0_axi4_mem_master_translator:m0_wuser -> UABChip_0_axi4_mem_master_agent:wuser
	wire    [1:0] uabchip_0_axi4_mem_master_translator_m0_awburst;              // UABChip_0_axi4_mem_master_translator:m0_awburst -> UABChip_0_axi4_mem_master_agent:awburst
	wire    [3:0] uabchip_0_axi4_mem_master_translator_m0_arregion;             // UABChip_0_axi4_mem_master_translator:m0_arregion -> UABChip_0_axi4_mem_master_agent:arregion
	wire    [0:0] uabchip_0_axi4_mem_master_translator_m0_awuser;               // UABChip_0_axi4_mem_master_translator:m0_awuser -> UABChip_0_axi4_mem_master_agent:awuser
	wire    [7:0] uabchip_0_axi4_mem_master_translator_m0_arlen;                // UABChip_0_axi4_mem_master_translator:m0_arlen -> UABChip_0_axi4_mem_master_agent:arlen
	wire    [3:0] uabchip_0_axi4_mem_master_translator_m0_arqos;                // UABChip_0_axi4_mem_master_translator:m0_arqos -> UABChip_0_axi4_mem_master_agent:arqos
	wire    [3:0] uabchip_0_axi4_mem_master_translator_m0_wstrb;                // UABChip_0_axi4_mem_master_translator:m0_wstrb -> UABChip_0_axi4_mem_master_agent:wstrb
	wire          uabchip_0_axi4_mem_master_translator_m0_wready;               // UABChip_0_axi4_mem_master_agent:wready -> UABChip_0_axi4_mem_master_translator:m0_wready
	wire    [3:0] uabchip_0_axi4_mem_master_translator_m0_rid;                  // UABChip_0_axi4_mem_master_agent:rid -> UABChip_0_axi4_mem_master_translator:m0_rid
	wire          uabchip_0_axi4_mem_master_translator_m0_rready;               // UABChip_0_axi4_mem_master_translator:m0_rready -> UABChip_0_axi4_mem_master_agent:rready
	wire    [7:0] uabchip_0_axi4_mem_master_translator_m0_awlen;                // UABChip_0_axi4_mem_master_translator:m0_awlen -> UABChip_0_axi4_mem_master_agent:awlen
	wire    [3:0] uabchip_0_axi4_mem_master_translator_m0_awqos;                // UABChip_0_axi4_mem_master_translator:m0_awqos -> UABChip_0_axi4_mem_master_agent:awqos
	wire    [3:0] uabchip_0_axi4_mem_master_translator_m0_arcache;              // UABChip_0_axi4_mem_master_translator:m0_arcache -> UABChip_0_axi4_mem_master_agent:arcache
	wire          uabchip_0_axi4_mem_master_translator_m0_wvalid;               // UABChip_0_axi4_mem_master_translator:m0_wvalid -> UABChip_0_axi4_mem_master_agent:wvalid
	wire   [31:0] uabchip_0_axi4_mem_master_translator_m0_araddr;               // UABChip_0_axi4_mem_master_translator:m0_araddr -> UABChip_0_axi4_mem_master_agent:araddr
	wire    [2:0] uabchip_0_axi4_mem_master_translator_m0_arprot;               // UABChip_0_axi4_mem_master_translator:m0_arprot -> UABChip_0_axi4_mem_master_agent:arprot
	wire    [2:0] uabchip_0_axi4_mem_master_translator_m0_awprot;               // UABChip_0_axi4_mem_master_translator:m0_awprot -> UABChip_0_axi4_mem_master_agent:awprot
	wire   [31:0] uabchip_0_axi4_mem_master_translator_m0_wdata;                // UABChip_0_axi4_mem_master_translator:m0_wdata -> UABChip_0_axi4_mem_master_agent:wdata
	wire          uabchip_0_axi4_mem_master_translator_m0_arvalid;              // UABChip_0_axi4_mem_master_translator:m0_arvalid -> UABChip_0_axi4_mem_master_agent:arvalid
	wire    [3:0] uabchip_0_axi4_mem_master_translator_m0_awcache;              // UABChip_0_axi4_mem_master_translator:m0_awcache -> UABChip_0_axi4_mem_master_agent:awcache
	wire    [3:0] uabchip_0_axi4_mem_master_translator_m0_arid;                 // UABChip_0_axi4_mem_master_translator:m0_arid -> UABChip_0_axi4_mem_master_agent:arid
	wire    [0:0] uabchip_0_axi4_mem_master_translator_m0_arlock;               // UABChip_0_axi4_mem_master_translator:m0_arlock -> UABChip_0_axi4_mem_master_agent:arlock
	wire    [0:0] uabchip_0_axi4_mem_master_translator_m0_awlock;               // UABChip_0_axi4_mem_master_translator:m0_awlock -> UABChip_0_axi4_mem_master_agent:awlock
	wire   [31:0] uabchip_0_axi4_mem_master_translator_m0_awaddr;               // UABChip_0_axi4_mem_master_translator:m0_awaddr -> UABChip_0_axi4_mem_master_agent:awaddr
	wire    [1:0] uabchip_0_axi4_mem_master_translator_m0_bresp;                // UABChip_0_axi4_mem_master_agent:bresp -> UABChip_0_axi4_mem_master_translator:m0_bresp
	wire          uabchip_0_axi4_mem_master_translator_m0_arready;              // UABChip_0_axi4_mem_master_agent:arready -> UABChip_0_axi4_mem_master_translator:m0_arready
	wire   [31:0] uabchip_0_axi4_mem_master_translator_m0_rdata;                // UABChip_0_axi4_mem_master_agent:rdata -> UABChip_0_axi4_mem_master_translator:m0_rdata
	wire          uabchip_0_axi4_mem_master_translator_m0_awready;              // UABChip_0_axi4_mem_master_agent:awready -> UABChip_0_axi4_mem_master_translator:m0_awready
	wire    [1:0] uabchip_0_axi4_mem_master_translator_m0_arburst;              // UABChip_0_axi4_mem_master_translator:m0_arburst -> UABChip_0_axi4_mem_master_agent:arburst
	wire    [2:0] uabchip_0_axi4_mem_master_translator_m0_arsize;               // UABChip_0_axi4_mem_master_translator:m0_arsize -> UABChip_0_axi4_mem_master_agent:arsize
	wire          uabchip_0_axi4_mem_master_translator_m0_bready;               // UABChip_0_axi4_mem_master_translator:m0_bready -> UABChip_0_axi4_mem_master_agent:bready
	wire          uabchip_0_axi4_mem_master_translator_m0_rlast;                // UABChip_0_axi4_mem_master_agent:rlast -> UABChip_0_axi4_mem_master_translator:m0_rlast
	wire          uabchip_0_axi4_mem_master_translator_m0_wlast;                // UABChip_0_axi4_mem_master_translator:m0_wlast -> UABChip_0_axi4_mem_master_agent:wlast
	wire    [3:0] uabchip_0_axi4_mem_master_translator_m0_awregion;             // UABChip_0_axi4_mem_master_translator:m0_awregion -> UABChip_0_axi4_mem_master_agent:awregion
	wire    [0:0] uabchip_0_axi4_mem_master_translator_m0_buser;                // UABChip_0_axi4_mem_master_agent:buser -> UABChip_0_axi4_mem_master_translator:m0_buser
	wire    [1:0] uabchip_0_axi4_mem_master_translator_m0_rresp;                // UABChip_0_axi4_mem_master_agent:rresp -> UABChip_0_axi4_mem_master_translator:m0_rresp
	wire    [3:0] uabchip_0_axi4_mem_master_translator_m0_awid;                 // UABChip_0_axi4_mem_master_translator:m0_awid -> UABChip_0_axi4_mem_master_agent:awid
	wire    [3:0] uabchip_0_axi4_mem_master_translator_m0_bid;                  // UABChip_0_axi4_mem_master_agent:bid -> UABChip_0_axi4_mem_master_translator:m0_bid
	wire          uabchip_0_axi4_mem_master_translator_m0_bvalid;               // UABChip_0_axi4_mem_master_agent:bvalid -> UABChip_0_axi4_mem_master_translator:m0_bvalid
	wire    [2:0] uabchip_0_axi4_mem_master_translator_m0_awsize;               // UABChip_0_axi4_mem_master_translator:m0_awsize -> UABChip_0_axi4_mem_master_agent:awsize
	wire          uabchip_0_axi4_mem_master_translator_m0_awvalid;              // UABChip_0_axi4_mem_master_translator:m0_awvalid -> UABChip_0_axi4_mem_master_agent:awvalid
	wire    [0:0] uabchip_0_axi4_mem_master_translator_m0_aruser;               // UABChip_0_axi4_mem_master_translator:m0_aruser -> UABChip_0_axi4_mem_master_agent:aruser
	wire          uabchip_0_axi4_mem_master_translator_m0_rvalid;               // UABChip_0_axi4_mem_master_agent:rvalid -> UABChip_0_axi4_mem_master_translator:m0_rvalid
	wire          rsp_mux_src_valid;                                            // rsp_mux:src_valid -> UABChip_0_axi4_mem_master_agent:write_rp_valid
	wire  [123:0] rsp_mux_src_data;                                             // rsp_mux:src_data -> UABChip_0_axi4_mem_master_agent:write_rp_data
	wire          rsp_mux_src_ready;                                            // UABChip_0_axi4_mem_master_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                          // rsp_mux:src_channel -> UABChip_0_axi4_mem_master_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                    // rsp_mux:src_startofpacket -> UABChip_0_axi4_mem_master_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                      // rsp_mux:src_endofpacket -> UABChip_0_axi4_mem_master_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                        // rsp_mux_001:src_valid -> UABChip_0_axi4_mem_master_agent:read_rp_valid
	wire  [123:0] rsp_mux_001_src_data;                                         // rsp_mux_001:src_data -> UABChip_0_axi4_mem_master_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                        // UABChip_0_axi4_mem_master_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                      // rsp_mux_001:src_channel -> UABChip_0_axi4_mem_master_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                // rsp_mux_001:src_startofpacket -> UABChip_0_axi4_mem_master_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                  // rsp_mux_001:src_endofpacket -> UABChip_0_axi4_mem_master_agent:read_rp_endofpacket
	wire  [127:0] ddr3_hps_f2h_sdram0_data_agent_m0_readdata;                   // ddr3_hps_f2h_sdram0_data_translator:uav_readdata -> ddr3_hps_f2h_sdram0_data_agent:m0_readdata
	wire          ddr3_hps_f2h_sdram0_data_agent_m0_waitrequest;                // ddr3_hps_f2h_sdram0_data_translator:uav_waitrequest -> ddr3_hps_f2h_sdram0_data_agent:m0_waitrequest
	wire          ddr3_hps_f2h_sdram0_data_agent_m0_debugaccess;                // ddr3_hps_f2h_sdram0_data_agent:m0_debugaccess -> ddr3_hps_f2h_sdram0_data_translator:uav_debugaccess
	wire   [31:0] ddr3_hps_f2h_sdram0_data_agent_m0_address;                    // ddr3_hps_f2h_sdram0_data_agent:m0_address -> ddr3_hps_f2h_sdram0_data_translator:uav_address
	wire   [15:0] ddr3_hps_f2h_sdram0_data_agent_m0_byteenable;                 // ddr3_hps_f2h_sdram0_data_agent:m0_byteenable -> ddr3_hps_f2h_sdram0_data_translator:uav_byteenable
	wire          ddr3_hps_f2h_sdram0_data_agent_m0_read;                       // ddr3_hps_f2h_sdram0_data_agent:m0_read -> ddr3_hps_f2h_sdram0_data_translator:uav_read
	wire          ddr3_hps_f2h_sdram0_data_agent_m0_readdatavalid;              // ddr3_hps_f2h_sdram0_data_translator:uav_readdatavalid -> ddr3_hps_f2h_sdram0_data_agent:m0_readdatavalid
	wire          ddr3_hps_f2h_sdram0_data_agent_m0_lock;                       // ddr3_hps_f2h_sdram0_data_agent:m0_lock -> ddr3_hps_f2h_sdram0_data_translator:uav_lock
	wire  [127:0] ddr3_hps_f2h_sdram0_data_agent_m0_writedata;                  // ddr3_hps_f2h_sdram0_data_agent:m0_writedata -> ddr3_hps_f2h_sdram0_data_translator:uav_writedata
	wire          ddr3_hps_f2h_sdram0_data_agent_m0_write;                      // ddr3_hps_f2h_sdram0_data_agent:m0_write -> ddr3_hps_f2h_sdram0_data_translator:uav_write
	wire   [12:0] ddr3_hps_f2h_sdram0_data_agent_m0_burstcount;                 // ddr3_hps_f2h_sdram0_data_agent:m0_burstcount -> ddr3_hps_f2h_sdram0_data_translator:uav_burstcount
	wire          ddr3_hps_f2h_sdram0_data_agent_rf_source_valid;               // ddr3_hps_f2h_sdram0_data_agent:rf_source_valid -> ddr3_hps_f2h_sdram0_data_agent_rsp_fifo:in_valid
	wire  [232:0] ddr3_hps_f2h_sdram0_data_agent_rf_source_data;                // ddr3_hps_f2h_sdram0_data_agent:rf_source_data -> ddr3_hps_f2h_sdram0_data_agent_rsp_fifo:in_data
	wire          ddr3_hps_f2h_sdram0_data_agent_rf_source_ready;               // ddr3_hps_f2h_sdram0_data_agent_rsp_fifo:in_ready -> ddr3_hps_f2h_sdram0_data_agent:rf_source_ready
	wire          ddr3_hps_f2h_sdram0_data_agent_rf_source_startofpacket;       // ddr3_hps_f2h_sdram0_data_agent:rf_source_startofpacket -> ddr3_hps_f2h_sdram0_data_agent_rsp_fifo:in_startofpacket
	wire          ddr3_hps_f2h_sdram0_data_agent_rf_source_endofpacket;         // ddr3_hps_f2h_sdram0_data_agent:rf_source_endofpacket -> ddr3_hps_f2h_sdram0_data_agent_rsp_fifo:in_endofpacket
	wire          ddr3_hps_f2h_sdram0_data_agent_rsp_fifo_out_valid;            // ddr3_hps_f2h_sdram0_data_agent_rsp_fifo:out_valid -> ddr3_hps_f2h_sdram0_data_agent:rf_sink_valid
	wire  [232:0] ddr3_hps_f2h_sdram0_data_agent_rsp_fifo_out_data;             // ddr3_hps_f2h_sdram0_data_agent_rsp_fifo:out_data -> ddr3_hps_f2h_sdram0_data_agent:rf_sink_data
	wire          ddr3_hps_f2h_sdram0_data_agent_rsp_fifo_out_ready;            // ddr3_hps_f2h_sdram0_data_agent:rf_sink_ready -> ddr3_hps_f2h_sdram0_data_agent_rsp_fifo:out_ready
	wire          ddr3_hps_f2h_sdram0_data_agent_rsp_fifo_out_startofpacket;    // ddr3_hps_f2h_sdram0_data_agent_rsp_fifo:out_startofpacket -> ddr3_hps_f2h_sdram0_data_agent:rf_sink_startofpacket
	wire          ddr3_hps_f2h_sdram0_data_agent_rsp_fifo_out_endofpacket;      // ddr3_hps_f2h_sdram0_data_agent_rsp_fifo:out_endofpacket -> ddr3_hps_f2h_sdram0_data_agent:rf_sink_endofpacket
	wire          ddr3_hps_f2h_sdram0_data_agent_rdata_fifo_src_valid;          // ddr3_hps_f2h_sdram0_data_agent:rdata_fifo_src_valid -> ddr3_hps_f2h_sdram0_data_agent_rdata_fifo:in_valid
	wire  [129:0] ddr3_hps_f2h_sdram0_data_agent_rdata_fifo_src_data;           // ddr3_hps_f2h_sdram0_data_agent:rdata_fifo_src_data -> ddr3_hps_f2h_sdram0_data_agent_rdata_fifo:in_data
	wire          ddr3_hps_f2h_sdram0_data_agent_rdata_fifo_src_ready;          // ddr3_hps_f2h_sdram0_data_agent_rdata_fifo:in_ready -> ddr3_hps_f2h_sdram0_data_agent:rdata_fifo_src_ready
	wire          uabchip_0_axi4_mem_master_agent_write_cp_valid;               // UABChip_0_axi4_mem_master_agent:write_cp_valid -> router:sink_valid
	wire  [123:0] uabchip_0_axi4_mem_master_agent_write_cp_data;                // UABChip_0_axi4_mem_master_agent:write_cp_data -> router:sink_data
	wire          uabchip_0_axi4_mem_master_agent_write_cp_ready;               // router:sink_ready -> UABChip_0_axi4_mem_master_agent:write_cp_ready
	wire          uabchip_0_axi4_mem_master_agent_write_cp_startofpacket;       // UABChip_0_axi4_mem_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          uabchip_0_axi4_mem_master_agent_write_cp_endofpacket;         // UABChip_0_axi4_mem_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                             // router:src_valid -> cmd_demux:sink_valid
	wire  [123:0] router_src_data;                                              // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                             // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                           // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                     // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                       // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          uabchip_0_axi4_mem_master_agent_read_cp_valid;                // UABChip_0_axi4_mem_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [123:0] uabchip_0_axi4_mem_master_agent_read_cp_data;                 // UABChip_0_axi4_mem_master_agent:read_cp_data -> router_001:sink_data
	wire          uabchip_0_axi4_mem_master_agent_read_cp_ready;                // router_001:sink_ready -> UABChip_0_axi4_mem_master_agent:read_cp_ready
	wire          uabchip_0_axi4_mem_master_agent_read_cp_startofpacket;        // UABChip_0_axi4_mem_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          uabchip_0_axi4_mem_master_agent_read_cp_endofpacket;          // UABChip_0_axi4_mem_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                         // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [123:0] router_001_src_data;                                          // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                         // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                       // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                 // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                   // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          ddr3_hps_f2h_sdram0_data_agent_rp_valid;                      // ddr3_hps_f2h_sdram0_data_agent:rp_valid -> router_002:sink_valid
	wire  [231:0] ddr3_hps_f2h_sdram0_data_agent_rp_data;                       // ddr3_hps_f2h_sdram0_data_agent:rp_data -> router_002:sink_data
	wire          ddr3_hps_f2h_sdram0_data_agent_rp_ready;                      // router_002:sink_ready -> ddr3_hps_f2h_sdram0_data_agent:rp_ready
	wire          ddr3_hps_f2h_sdram0_data_agent_rp_startofpacket;              // ddr3_hps_f2h_sdram0_data_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          ddr3_hps_f2h_sdram0_data_agent_rp_endofpacket;                // ddr3_hps_f2h_sdram0_data_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          ddr3_hps_f2h_sdram0_data_burst_adapter_source0_valid;         // ddr3_hps_f2h_sdram0_data_burst_adapter:source0_valid -> ddr3_hps_f2h_sdram0_data_agent:cp_valid
	wire  [231:0] ddr3_hps_f2h_sdram0_data_burst_adapter_source0_data;          // ddr3_hps_f2h_sdram0_data_burst_adapter:source0_data -> ddr3_hps_f2h_sdram0_data_agent:cp_data
	wire          ddr3_hps_f2h_sdram0_data_burst_adapter_source0_ready;         // ddr3_hps_f2h_sdram0_data_agent:cp_ready -> ddr3_hps_f2h_sdram0_data_burst_adapter:source0_ready
	wire    [1:0] ddr3_hps_f2h_sdram0_data_burst_adapter_source0_channel;       // ddr3_hps_f2h_sdram0_data_burst_adapter:source0_channel -> ddr3_hps_f2h_sdram0_data_agent:cp_channel
	wire          ddr3_hps_f2h_sdram0_data_burst_adapter_source0_startofpacket; // ddr3_hps_f2h_sdram0_data_burst_adapter:source0_startofpacket -> ddr3_hps_f2h_sdram0_data_agent:cp_startofpacket
	wire          ddr3_hps_f2h_sdram0_data_burst_adapter_source0_endofpacket;   // ddr3_hps_f2h_sdram0_data_burst_adapter:source0_endofpacket -> ddr3_hps_f2h_sdram0_data_agent:cp_endofpacket
	wire          router_002_src_valid;                                         // router_002:src_valid -> ddr3_hps_f2h_sdram0_data_rsp_width_adapter:in_valid
	wire  [231:0] router_002_src_data;                                          // router_002:src_data -> ddr3_hps_f2h_sdram0_data_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                         // ddr3_hps_f2h_sdram0_data_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                       // router_002:src_channel -> ddr3_hps_f2h_sdram0_data_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                 // router_002:src_startofpacket -> ddr3_hps_f2h_sdram0_data_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                   // router_002:src_endofpacket -> ddr3_hps_f2h_sdram0_data_rsp_width_adapter:in_endofpacket
	wire          ddr3_hps_f2h_sdram0_data_rsp_width_adapter_src_valid;         // ddr3_hps_f2h_sdram0_data_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [123:0] ddr3_hps_f2h_sdram0_data_rsp_width_adapter_src_data;          // ddr3_hps_f2h_sdram0_data_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          ddr3_hps_f2h_sdram0_data_rsp_width_adapter_src_ready;         // rsp_demux:sink_ready -> ddr3_hps_f2h_sdram0_data_rsp_width_adapter:out_ready
	wire    [1:0] ddr3_hps_f2h_sdram0_data_rsp_width_adapter_src_channel;       // ddr3_hps_f2h_sdram0_data_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          ddr3_hps_f2h_sdram0_data_rsp_width_adapter_src_startofpacket; // ddr3_hps_f2h_sdram0_data_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          ddr3_hps_f2h_sdram0_data_rsp_width_adapter_src_endofpacket;   // ddr3_hps_f2h_sdram0_data_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                            // cmd_mux:src_valid -> ddr3_hps_f2h_sdram0_data_cmd_width_adapter:in_valid
	wire  [123:0] cmd_mux_src_data;                                             // cmd_mux:src_data -> ddr3_hps_f2h_sdram0_data_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                            // ddr3_hps_f2h_sdram0_data_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                          // cmd_mux:src_channel -> ddr3_hps_f2h_sdram0_data_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                    // cmd_mux:src_startofpacket -> ddr3_hps_f2h_sdram0_data_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                      // cmd_mux:src_endofpacket -> ddr3_hps_f2h_sdram0_data_cmd_width_adapter:in_endofpacket
	wire          ddr3_hps_f2h_sdram0_data_cmd_width_adapter_src_valid;         // ddr3_hps_f2h_sdram0_data_cmd_width_adapter:out_valid -> ddr3_hps_f2h_sdram0_data_burst_adapter:sink0_valid
	wire  [231:0] ddr3_hps_f2h_sdram0_data_cmd_width_adapter_src_data;          // ddr3_hps_f2h_sdram0_data_cmd_width_adapter:out_data -> ddr3_hps_f2h_sdram0_data_burst_adapter:sink0_data
	wire          ddr3_hps_f2h_sdram0_data_cmd_width_adapter_src_ready;         // ddr3_hps_f2h_sdram0_data_burst_adapter:sink0_ready -> ddr3_hps_f2h_sdram0_data_cmd_width_adapter:out_ready
	wire    [1:0] ddr3_hps_f2h_sdram0_data_cmd_width_adapter_src_channel;       // ddr3_hps_f2h_sdram0_data_cmd_width_adapter:out_channel -> ddr3_hps_f2h_sdram0_data_burst_adapter:sink0_channel
	wire          ddr3_hps_f2h_sdram0_data_cmd_width_adapter_src_startofpacket; // ddr3_hps_f2h_sdram0_data_cmd_width_adapter:out_startofpacket -> ddr3_hps_f2h_sdram0_data_burst_adapter:sink0_startofpacket
	wire          ddr3_hps_f2h_sdram0_data_cmd_width_adapter_src_endofpacket;   // ddr3_hps_f2h_sdram0_data_cmd_width_adapter:out_endofpacket -> ddr3_hps_f2h_sdram0_data_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                         // cmd_demux:src0_valid -> crosser:in_valid
	wire  [123:0] cmd_demux_src0_data;                                          // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                         // crosser:in_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                       // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                 // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                   // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                            // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [123:0] crosser_out_data;                                             // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                            // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [1:0] crosser_out_channel;                                          // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                    // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                      // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                     // cmd_demux_001:src0_valid -> crosser_001:in_valid
	wire  [123:0] cmd_demux_001_src0_data;                                      // cmd_demux_001:src0_data -> crosser_001:in_data
	wire          cmd_demux_001_src0_ready;                                     // crosser_001:in_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                   // cmd_demux_001:src0_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                             // cmd_demux_001:src0_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                               // cmd_demux_001:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                        // crosser_001:out_valid -> cmd_mux:sink1_valid
	wire  [123:0] crosser_001_out_data;                                         // crosser_001:out_data -> cmd_mux:sink1_data
	wire          crosser_001_out_ready;                                        // cmd_mux:sink1_ready -> crosser_001:out_ready
	wire    [1:0] crosser_001_out_channel;                                      // crosser_001:out_channel -> cmd_mux:sink1_channel
	wire          crosser_001_out_startofpacket;                                // crosser_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          crosser_001_out_endofpacket;                                  // crosser_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                         // rsp_demux:src0_valid -> crosser_002:in_valid
	wire  [123:0] rsp_demux_src0_data;                                          // rsp_demux:src0_data -> crosser_002:in_data
	wire          rsp_demux_src0_ready;                                         // crosser_002:in_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                       // rsp_demux:src0_channel -> crosser_002:in_channel
	wire          rsp_demux_src0_startofpacket;                                 // rsp_demux:src0_startofpacket -> crosser_002:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                   // rsp_demux:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                        // crosser_002:out_valid -> rsp_mux:sink0_valid
	wire  [123:0] crosser_002_out_data;                                         // crosser_002:out_data -> rsp_mux:sink0_data
	wire          crosser_002_out_ready;                                        // rsp_mux:sink0_ready -> crosser_002:out_ready
	wire    [1:0] crosser_002_out_channel;                                      // crosser_002:out_channel -> rsp_mux:sink0_channel
	wire          crosser_002_out_startofpacket;                                // crosser_002:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                  // crosser_002:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                         // rsp_demux:src1_valid -> crosser_003:in_valid
	wire  [123:0] rsp_demux_src1_data;                                          // rsp_demux:src1_data -> crosser_003:in_data
	wire          rsp_demux_src1_ready;                                         // crosser_003:in_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                       // rsp_demux:src1_channel -> crosser_003:in_channel
	wire          rsp_demux_src1_startofpacket;                                 // rsp_demux:src1_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                   // rsp_demux:src1_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                        // crosser_003:out_valid -> rsp_mux_001:sink0_valid
	wire  [123:0] crosser_003_out_data;                                         // crosser_003:out_data -> rsp_mux_001:sink0_data
	wire          crosser_003_out_ready;                                        // rsp_mux_001:sink0_ready -> crosser_003:out_ready
	wire    [1:0] crosser_003_out_channel;                                      // crosser_003:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_003_out_startofpacket;                                // crosser_003:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                  // crosser_003:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          ddr3_hps_f2h_sdram0_data_agent_rdata_fifo_out_valid;          // ddr3_hps_f2h_sdram0_data_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [129:0] ddr3_hps_f2h_sdram0_data_agent_rdata_fifo_out_data;           // ddr3_hps_f2h_sdram0_data_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          ddr3_hps_f2h_sdram0_data_agent_rdata_fifo_out_ready;          // avalon_st_adapter:in_0_ready -> ddr3_hps_f2h_sdram0_data_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                // avalon_st_adapter:out_0_valid -> ddr3_hps_f2h_sdram0_data_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_out_0_data;                                 // avalon_st_adapter:out_0_data -> ddr3_hps_f2h_sdram0_data_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                // ddr3_hps_f2h_sdram0_data_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                // avalon_st_adapter:out_0_error -> ddr3_hps_f2h_sdram0_data_agent:rdata_fifo_sink_error

	altera_merlin_axi_translator #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (1),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (1),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (4),
		.DATA_WIDTH                        (32),
		.S0_ID_WIDTH                       (4),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4")
	) uabchip_0_axi4_mem_master_translator (
		.aclk        (clk_clk_clk),                                      //       clk.clk
		.aresetn     (~UABChip_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset_n
		.m0_awid     (uabchip_0_axi4_mem_master_translator_m0_awid),     //        m0.awid
		.m0_awaddr   (uabchip_0_axi4_mem_master_translator_m0_awaddr),   //          .awaddr
		.m0_awlen    (uabchip_0_axi4_mem_master_translator_m0_awlen),    //          .awlen
		.m0_awsize   (uabchip_0_axi4_mem_master_translator_m0_awsize),   //          .awsize
		.m0_awburst  (uabchip_0_axi4_mem_master_translator_m0_awburst),  //          .awburst
		.m0_awlock   (uabchip_0_axi4_mem_master_translator_m0_awlock),   //          .awlock
		.m0_awcache  (uabchip_0_axi4_mem_master_translator_m0_awcache),  //          .awcache
		.m0_awprot   (uabchip_0_axi4_mem_master_translator_m0_awprot),   //          .awprot
		.m0_awuser   (uabchip_0_axi4_mem_master_translator_m0_awuser),   //          .awuser
		.m0_awqos    (uabchip_0_axi4_mem_master_translator_m0_awqos),    //          .awqos
		.m0_awregion (uabchip_0_axi4_mem_master_translator_m0_awregion), //          .awregion
		.m0_awvalid  (uabchip_0_axi4_mem_master_translator_m0_awvalid),  //          .awvalid
		.m0_awready  (uabchip_0_axi4_mem_master_translator_m0_awready),  //          .awready
		.m0_wdata    (uabchip_0_axi4_mem_master_translator_m0_wdata),    //          .wdata
		.m0_wstrb    (uabchip_0_axi4_mem_master_translator_m0_wstrb),    //          .wstrb
		.m0_wlast    (uabchip_0_axi4_mem_master_translator_m0_wlast),    //          .wlast
		.m0_wvalid   (uabchip_0_axi4_mem_master_translator_m0_wvalid),   //          .wvalid
		.m0_wuser    (uabchip_0_axi4_mem_master_translator_m0_wuser),    //          .wuser
		.m0_wready   (uabchip_0_axi4_mem_master_translator_m0_wready),   //          .wready
		.m0_bid      (uabchip_0_axi4_mem_master_translator_m0_bid),      //          .bid
		.m0_bresp    (uabchip_0_axi4_mem_master_translator_m0_bresp),    //          .bresp
		.m0_buser    (uabchip_0_axi4_mem_master_translator_m0_buser),    //          .buser
		.m0_bvalid   (uabchip_0_axi4_mem_master_translator_m0_bvalid),   //          .bvalid
		.m0_bready   (uabchip_0_axi4_mem_master_translator_m0_bready),   //          .bready
		.m0_arid     (uabchip_0_axi4_mem_master_translator_m0_arid),     //          .arid
		.m0_araddr   (uabchip_0_axi4_mem_master_translator_m0_araddr),   //          .araddr
		.m0_arlen    (uabchip_0_axi4_mem_master_translator_m0_arlen),    //          .arlen
		.m0_arsize   (uabchip_0_axi4_mem_master_translator_m0_arsize),   //          .arsize
		.m0_arburst  (uabchip_0_axi4_mem_master_translator_m0_arburst),  //          .arburst
		.m0_arlock   (uabchip_0_axi4_mem_master_translator_m0_arlock),   //          .arlock
		.m0_arcache  (uabchip_0_axi4_mem_master_translator_m0_arcache),  //          .arcache
		.m0_arprot   (uabchip_0_axi4_mem_master_translator_m0_arprot),   //          .arprot
		.m0_aruser   (uabchip_0_axi4_mem_master_translator_m0_aruser),   //          .aruser
		.m0_arqos    (uabchip_0_axi4_mem_master_translator_m0_arqos),    //          .arqos
		.m0_arregion (uabchip_0_axi4_mem_master_translator_m0_arregion), //          .arregion
		.m0_arvalid  (uabchip_0_axi4_mem_master_translator_m0_arvalid),  //          .arvalid
		.m0_arready  (uabchip_0_axi4_mem_master_translator_m0_arready),  //          .arready
		.m0_rid      (uabchip_0_axi4_mem_master_translator_m0_rid),      //          .rid
		.m0_rdata    (uabchip_0_axi4_mem_master_translator_m0_rdata),    //          .rdata
		.m0_rresp    (uabchip_0_axi4_mem_master_translator_m0_rresp),    //          .rresp
		.m0_rlast    (uabchip_0_axi4_mem_master_translator_m0_rlast),    //          .rlast
		.m0_rvalid   (uabchip_0_axi4_mem_master_translator_m0_rvalid),   //          .rvalid
		.m0_rready   (uabchip_0_axi4_mem_master_translator_m0_rready),   //          .rready
		.m0_ruser    (uabchip_0_axi4_mem_master_translator_m0_ruser),    //          .ruser
		.s0_awid     (UABChip_0_axi4_mem_master_awid),                   //        s0.awid
		.s0_awaddr   (UABChip_0_axi4_mem_master_awaddr),                 //          .awaddr
		.s0_awlen    (UABChip_0_axi4_mem_master_awlen),                  //          .awlen
		.s0_awsize   (UABChip_0_axi4_mem_master_awsize),                 //          .awsize
		.s0_awburst  (UABChip_0_axi4_mem_master_awburst),                //          .awburst
		.s0_awlock   (UABChip_0_axi4_mem_master_awlock),                 //          .awlock
		.s0_awcache  (UABChip_0_axi4_mem_master_awcache),                //          .awcache
		.s0_awprot   (UABChip_0_axi4_mem_master_awprot),                 //          .awprot
		.s0_awqos    (UABChip_0_axi4_mem_master_awqos),                  //          .awqos
		.s0_awvalid  (UABChip_0_axi4_mem_master_awvalid),                //          .awvalid
		.s0_awready  (UABChip_0_axi4_mem_master_awready),                //          .awready
		.s0_wdata    (UABChip_0_axi4_mem_master_wdata),                  //          .wdata
		.s0_wstrb    (UABChip_0_axi4_mem_master_wstrb),                  //          .wstrb
		.s0_wlast    (UABChip_0_axi4_mem_master_wlast),                  //          .wlast
		.s0_wvalid   (UABChip_0_axi4_mem_master_wvalid),                 //          .wvalid
		.s0_wready   (UABChip_0_axi4_mem_master_wready),                 //          .wready
		.s0_bid      (UABChip_0_axi4_mem_master_bid),                    //          .bid
		.s0_bresp    (UABChip_0_axi4_mem_master_bresp),                  //          .bresp
		.s0_bvalid   (UABChip_0_axi4_mem_master_bvalid),                 //          .bvalid
		.s0_bready   (UABChip_0_axi4_mem_master_bready),                 //          .bready
		.s0_arid     (UABChip_0_axi4_mem_master_arid),                   //          .arid
		.s0_araddr   (UABChip_0_axi4_mem_master_araddr),                 //          .araddr
		.s0_arlen    (UABChip_0_axi4_mem_master_arlen),                  //          .arlen
		.s0_arsize   (UABChip_0_axi4_mem_master_arsize),                 //          .arsize
		.s0_arburst  (UABChip_0_axi4_mem_master_arburst),                //          .arburst
		.s0_arlock   (UABChip_0_axi4_mem_master_arlock),                 //          .arlock
		.s0_arcache  (UABChip_0_axi4_mem_master_arcache),                //          .arcache
		.s0_arprot   (UABChip_0_axi4_mem_master_arprot),                 //          .arprot
		.s0_arqos    (UABChip_0_axi4_mem_master_arqos),                  //          .arqos
		.s0_arvalid  (UABChip_0_axi4_mem_master_arvalid),                //          .arvalid
		.s0_arready  (UABChip_0_axi4_mem_master_arready),                //          .arready
		.s0_rid      (UABChip_0_axi4_mem_master_rid),                    //          .rid
		.s0_rdata    (UABChip_0_axi4_mem_master_rdata),                  //          .rdata
		.s0_rresp    (UABChip_0_axi4_mem_master_rresp),                  //          .rresp
		.s0_rlast    (UABChip_0_axi4_mem_master_rlast),                  //          .rlast
		.s0_rvalid   (UABChip_0_axi4_mem_master_rvalid),                 //          .rvalid
		.s0_rready   (UABChip_0_axi4_mem_master_rready),                 //          .rready
		.s0_awuser   (1'b0),                                             // (terminated)
		.s0_awregion (4'b0000),                                          // (terminated)
		.s0_wuser    (1'b0),                                             // (terminated)
		.s0_buser    (),                                                 // (terminated)
		.s0_aruser   (1'b0),                                             // (terminated)
		.s0_arregion (4'b0000),                                          // (terminated)
		.s0_ruser    (),                                                 // (terminated)
		.s0_wid      (4'b0000),                                          // (terminated)
		.m0_wid      ()                                                  // (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (9),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (13),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ddr3_hps_f2h_sdram0_data_translator (
		.clk                    (mem_pll_outclk0_clk),                                                   //                      clk.clk
		.reset                  (ddr3_hps_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ddr3_hps_f2h_sdram0_data_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (ddr3_hps_f2h_sdram0_data_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (ddr3_hps_f2h_sdram0_data_agent_m0_read),                                //                         .read
		.uav_write              (ddr3_hps_f2h_sdram0_data_agent_m0_write),                               //                         .write
		.uav_waitrequest        (ddr3_hps_f2h_sdram0_data_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (ddr3_hps_f2h_sdram0_data_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (ddr3_hps_f2h_sdram0_data_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (ddr3_hps_f2h_sdram0_data_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (ddr3_hps_f2h_sdram0_data_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (ddr3_hps_f2h_sdram0_data_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (ddr3_hps_f2h_sdram0_data_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (ddr3_hps_f2h_sdram0_data_address),                                      //      avalon_anti_slave_0.address
		.av_write               (ddr3_hps_f2h_sdram0_data_write),                                        //                         .write
		.av_read                (ddr3_hps_f2h_sdram0_data_read),                                         //                         .read
		.av_readdata            (ddr3_hps_f2h_sdram0_data_readdata),                                     //                         .readdata
		.av_writedata           (ddr3_hps_f2h_sdram0_data_writedata),                                    //                         .writedata
		.av_burstcount          (ddr3_hps_f2h_sdram0_data_burstcount),                                   //                         .burstcount
		.av_byteenable          (ddr3_hps_f2h_sdram0_data_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (ddr3_hps_f2h_sdram0_data_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (ddr3_hps_f2h_sdram0_data_waitrequest),                                  //                         .waitrequest
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_chipselect          (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (4),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (101),
		.PKT_CACHE_H               (118),
		.PKT_CACHE_L               (115),
		.PKT_ADDR_SIDEBAND_H       (99),
		.PKT_ADDR_SIDEBAND_L       (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (107),
		.PKT_THREAD_ID_H           (111),
		.PKT_THREAD_ID_L           (108),
		.PKT_QOS_L                 (102),
		.PKT_QOS_H                 (105),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_DATA_SIDEBAND_H       (100),
		.PKT_DATA_SIDEBAND_L       (100),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (2),
		.ID                        (0)
	) uabchip_0_axi4_mem_master_agent (
		.aclk                   (clk_clk_clk),                                            //              clk.clk
		.aresetn                (~UABChip_0_reset_reset_bridge_in_reset_reset),           //        clk_reset.reset_n
		.write_cp_valid         (uabchip_0_axi4_mem_master_agent_write_cp_valid),         //         write_cp.valid
		.write_cp_data          (uabchip_0_axi4_mem_master_agent_write_cp_data),          //                 .data
		.write_cp_startofpacket (uabchip_0_axi4_mem_master_agent_write_cp_startofpacket), //                 .startofpacket
		.write_cp_endofpacket   (uabchip_0_axi4_mem_master_agent_write_cp_endofpacket),   //                 .endofpacket
		.write_cp_ready         (uabchip_0_axi4_mem_master_agent_write_cp_ready),         //                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                      //         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                       //                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                    //                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                              //                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                //                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                      //                 .ready
		.read_cp_valid          (uabchip_0_axi4_mem_master_agent_read_cp_valid),          //          read_cp.valid
		.read_cp_data           (uabchip_0_axi4_mem_master_agent_read_cp_data),           //                 .data
		.read_cp_startofpacket  (uabchip_0_axi4_mem_master_agent_read_cp_startofpacket),  //                 .startofpacket
		.read_cp_endofpacket    (uabchip_0_axi4_mem_master_agent_read_cp_endofpacket),    //                 .endofpacket
		.read_cp_ready          (uabchip_0_axi4_mem_master_agent_read_cp_ready),          //                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                  //          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                   //                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                //                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                          //                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                            //                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                  //                 .ready
		.awid                   (uabchip_0_axi4_mem_master_translator_m0_awid),           // altera_axi_slave.awid
		.awaddr                 (uabchip_0_axi4_mem_master_translator_m0_awaddr),         //                 .awaddr
		.awlen                  (uabchip_0_axi4_mem_master_translator_m0_awlen),          //                 .awlen
		.awsize                 (uabchip_0_axi4_mem_master_translator_m0_awsize),         //                 .awsize
		.awburst                (uabchip_0_axi4_mem_master_translator_m0_awburst),        //                 .awburst
		.awlock                 (uabchip_0_axi4_mem_master_translator_m0_awlock),         //                 .awlock
		.awcache                (uabchip_0_axi4_mem_master_translator_m0_awcache),        //                 .awcache
		.awprot                 (uabchip_0_axi4_mem_master_translator_m0_awprot),         //                 .awprot
		.awuser                 (uabchip_0_axi4_mem_master_translator_m0_awuser),         //                 .awuser
		.awqos                  (uabchip_0_axi4_mem_master_translator_m0_awqos),          //                 .awqos
		.awregion               (uabchip_0_axi4_mem_master_translator_m0_awregion),       //                 .awregion
		.awvalid                (uabchip_0_axi4_mem_master_translator_m0_awvalid),        //                 .awvalid
		.awready                (uabchip_0_axi4_mem_master_translator_m0_awready),        //                 .awready
		.wdata                  (uabchip_0_axi4_mem_master_translator_m0_wdata),          //                 .wdata
		.wstrb                  (uabchip_0_axi4_mem_master_translator_m0_wstrb),          //                 .wstrb
		.wlast                  (uabchip_0_axi4_mem_master_translator_m0_wlast),          //                 .wlast
		.wvalid                 (uabchip_0_axi4_mem_master_translator_m0_wvalid),         //                 .wvalid
		.wuser                  (uabchip_0_axi4_mem_master_translator_m0_wuser),          //                 .wuser
		.wready                 (uabchip_0_axi4_mem_master_translator_m0_wready),         //                 .wready
		.bid                    (uabchip_0_axi4_mem_master_translator_m0_bid),            //                 .bid
		.bresp                  (uabchip_0_axi4_mem_master_translator_m0_bresp),          //                 .bresp
		.buser                  (uabchip_0_axi4_mem_master_translator_m0_buser),          //                 .buser
		.bvalid                 (uabchip_0_axi4_mem_master_translator_m0_bvalid),         //                 .bvalid
		.bready                 (uabchip_0_axi4_mem_master_translator_m0_bready),         //                 .bready
		.arid                   (uabchip_0_axi4_mem_master_translator_m0_arid),           //                 .arid
		.araddr                 (uabchip_0_axi4_mem_master_translator_m0_araddr),         //                 .araddr
		.arlen                  (uabchip_0_axi4_mem_master_translator_m0_arlen),          //                 .arlen
		.arsize                 (uabchip_0_axi4_mem_master_translator_m0_arsize),         //                 .arsize
		.arburst                (uabchip_0_axi4_mem_master_translator_m0_arburst),        //                 .arburst
		.arlock                 (uabchip_0_axi4_mem_master_translator_m0_arlock),         //                 .arlock
		.arcache                (uabchip_0_axi4_mem_master_translator_m0_arcache),        //                 .arcache
		.arprot                 (uabchip_0_axi4_mem_master_translator_m0_arprot),         //                 .arprot
		.aruser                 (uabchip_0_axi4_mem_master_translator_m0_aruser),         //                 .aruser
		.arqos                  (uabchip_0_axi4_mem_master_translator_m0_arqos),          //                 .arqos
		.arregion               (uabchip_0_axi4_mem_master_translator_m0_arregion),       //                 .arregion
		.arvalid                (uabchip_0_axi4_mem_master_translator_m0_arvalid),        //                 .arvalid
		.arready                (uabchip_0_axi4_mem_master_translator_m0_arready),        //                 .arready
		.rid                    (uabchip_0_axi4_mem_master_translator_m0_rid),            //                 .rid
		.rdata                  (uabchip_0_axi4_mem_master_translator_m0_rdata),          //                 .rdata
		.rresp                  (uabchip_0_axi4_mem_master_translator_m0_rresp),          //                 .rresp
		.rlast                  (uabchip_0_axi4_mem_master_translator_m0_rlast),          //                 .rlast
		.rvalid                 (uabchip_0_axi4_mem_master_translator_m0_rvalid),         //                 .rvalid
		.rready                 (uabchip_0_axi4_mem_master_translator_m0_rready),         //                 .rready
		.ruser                  (uabchip_0_axi4_mem_master_translator_m0_ruser),          //                 .ruser
		.wid                    (4'b0000)                                                 //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (231),
		.PKT_ORI_BURST_SIZE_L      (229),
		.PKT_RESPONSE_STATUS_H     (228),
		.PKT_RESPONSE_STATUS_L     (227),
		.PKT_BURST_SIZE_H          (204),
		.PKT_BURST_SIZE_L          (202),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (209),
		.PKT_PROTECTION_H          (222),
		.PKT_PROTECTION_L          (220),
		.PKT_BURSTWRAP_H           (201),
		.PKT_BURSTWRAP_L           (195),
		.PKT_BYTE_CNT_H            (194),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (214),
		.PKT_SRC_ID_L              (214),
		.PKT_DEST_ID_H             (215),
		.PKT_DEST_ID_L             (215),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (232),
		.AVS_BURSTCOUNT_W          (13),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ddr3_hps_f2h_sdram0_data_agent (
		.clk                     (mem_pll_outclk0_clk),                                                   //             clk.clk
		.reset                   (ddr3_hps_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ddr3_hps_f2h_sdram0_data_agent_m0_address),                             //              m0.address
		.m0_burstcount           (ddr3_hps_f2h_sdram0_data_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (ddr3_hps_f2h_sdram0_data_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (ddr3_hps_f2h_sdram0_data_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (ddr3_hps_f2h_sdram0_data_agent_m0_lock),                                //                .lock
		.m0_readdata             (ddr3_hps_f2h_sdram0_data_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (ddr3_hps_f2h_sdram0_data_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (ddr3_hps_f2h_sdram0_data_agent_m0_read),                                //                .read
		.m0_waitrequest          (ddr3_hps_f2h_sdram0_data_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (ddr3_hps_f2h_sdram0_data_agent_m0_writedata),                           //                .writedata
		.m0_write                (ddr3_hps_f2h_sdram0_data_agent_m0_write),                               //                .write
		.rp_endofpacket          (ddr3_hps_f2h_sdram0_data_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (ddr3_hps_f2h_sdram0_data_agent_rp_ready),                               //                .ready
		.rp_valid                (ddr3_hps_f2h_sdram0_data_agent_rp_valid),                               //                .valid
		.rp_data                 (ddr3_hps_f2h_sdram0_data_agent_rp_data),                                //                .data
		.rp_startofpacket        (ddr3_hps_f2h_sdram0_data_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (ddr3_hps_f2h_sdram0_data_burst_adapter_source0_ready),                  //              cp.ready
		.cp_valid                (ddr3_hps_f2h_sdram0_data_burst_adapter_source0_valid),                  //                .valid
		.cp_data                 (ddr3_hps_f2h_sdram0_data_burst_adapter_source0_data),                   //                .data
		.cp_startofpacket        (ddr3_hps_f2h_sdram0_data_burst_adapter_source0_startofpacket),          //                .startofpacket
		.cp_endofpacket          (ddr3_hps_f2h_sdram0_data_burst_adapter_source0_endofpacket),            //                .endofpacket
		.cp_channel              (ddr3_hps_f2h_sdram0_data_burst_adapter_source0_channel),                //                .channel
		.rf_sink_ready           (ddr3_hps_f2h_sdram0_data_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (ddr3_hps_f2h_sdram0_data_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (ddr3_hps_f2h_sdram0_data_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (ddr3_hps_f2h_sdram0_data_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (ddr3_hps_f2h_sdram0_data_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (ddr3_hps_f2h_sdram0_data_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (ddr3_hps_f2h_sdram0_data_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (ddr3_hps_f2h_sdram0_data_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (ddr3_hps_f2h_sdram0_data_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (ddr3_hps_f2h_sdram0_data_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (ddr3_hps_f2h_sdram0_data_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr3_hps_f2h_sdram0_data_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (ddr3_hps_f2h_sdram0_data_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (233),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ddr3_hps_f2h_sdram0_data_agent_rsp_fifo (
		.clk               (mem_pll_outclk0_clk),                                                   //       clk.clk
		.reset             (ddr3_hps_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ddr3_hps_f2h_sdram0_data_agent_rf_source_data),                         //        in.data
		.in_valid          (ddr3_hps_f2h_sdram0_data_agent_rf_source_valid),                        //          .valid
		.in_ready          (ddr3_hps_f2h_sdram0_data_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (ddr3_hps_f2h_sdram0_data_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (ddr3_hps_f2h_sdram0_data_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (ddr3_hps_f2h_sdram0_data_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (ddr3_hps_f2h_sdram0_data_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (ddr3_hps_f2h_sdram0_data_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (ddr3_hps_f2h_sdram0_data_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (ddr3_hps_f2h_sdram0_data_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ddr3_hps_f2h_sdram0_data_agent_rdata_fifo (
		.clk               (mem_pll_outclk0_clk),                                                   //       clk.clk
		.reset             (ddr3_hps_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ddr3_hps_f2h_sdram0_data_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (ddr3_hps_f2h_sdram0_data_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (ddr3_hps_f2h_sdram0_data_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (ddr3_hps_f2h_sdram0_data_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (ddr3_hps_f2h_sdram0_data_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (ddr3_hps_f2h_sdram0_data_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                                  // (terminated)
		.out_startofpacket (),                                                                      // (terminated)
		.out_endofpacket   (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	UAB_RV_System_mm_interconnect_0_router router (
		.sink_ready         (uabchip_0_axi4_mem_master_agent_write_cp_ready),         //      sink.ready
		.sink_valid         (uabchip_0_axi4_mem_master_agent_write_cp_valid),         //          .valid
		.sink_data          (uabchip_0_axi4_mem_master_agent_write_cp_data),          //          .data
		.sink_startofpacket (uabchip_0_axi4_mem_master_agent_write_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (uabchip_0_axi4_mem_master_agent_write_cp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                            //       clk.clk
		.reset              (UABChip_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_src_ready),                                       //       src.ready
		.src_valid          (router_src_valid),                                       //          .valid
		.src_data           (router_src_data),                                        //          .data
		.src_channel        (router_src_channel),                                     //          .channel
		.src_startofpacket  (router_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                  //          .endofpacket
	);

	UAB_RV_System_mm_interconnect_0_router router_001 (
		.sink_ready         (uabchip_0_axi4_mem_master_agent_read_cp_ready),         //      sink.ready
		.sink_valid         (uabchip_0_axi4_mem_master_agent_read_cp_valid),         //          .valid
		.sink_data          (uabchip_0_axi4_mem_master_agent_read_cp_data),          //          .data
		.sink_startofpacket (uabchip_0_axi4_mem_master_agent_read_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (uabchip_0_axi4_mem_master_agent_read_cp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                           //       clk.clk
		.reset              (UABChip_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_001_src_ready),                                  //       src.ready
		.src_valid          (router_001_src_valid),                                  //          .valid
		.src_data           (router_001_src_data),                                   //          .data
		.src_channel        (router_001_src_channel),                                //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                             //          .endofpacket
	);

	UAB_RV_System_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (ddr3_hps_f2h_sdram0_data_agent_rp_ready),                               //      sink.ready
		.sink_valid         (ddr3_hps_f2h_sdram0_data_agent_rp_valid),                               //          .valid
		.sink_data          (ddr3_hps_f2h_sdram0_data_agent_rp_data),                                //          .data
		.sink_startofpacket (ddr3_hps_f2h_sdram0_data_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (ddr3_hps_f2h_sdram0_data_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (mem_pll_outclk0_clk),                                                   //       clk.clk
		.reset              (ddr3_hps_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                                  //       src.ready
		.src_valid          (router_002_src_valid),                                                  //          .valid
		.src_data           (router_002_src_data),                                                   //          .data
		.src_channel        (router_002_src_channel),                                                //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                             //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (209),
		.PKT_BYTE_CNT_H            (194),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (204),
		.PKT_BURST_SIZE_L          (202),
		.PKT_BURST_TYPE_H          (206),
		.PKT_BURST_TYPE_L          (205),
		.PKT_BURSTWRAP_H           (201),
		.PKT_BURSTWRAP_L           (195),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (232),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (194),
		.OUT_BURSTWRAP_H           (201),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ddr3_hps_f2h_sdram0_data_burst_adapter (
		.clk                   (mem_pll_outclk0_clk),                                                   //       cr0.clk
		.reset                 (ddr3_hps_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ddr3_hps_f2h_sdram0_data_cmd_width_adapter_src_valid),                  //     sink0.valid
		.sink0_data            (ddr3_hps_f2h_sdram0_data_cmd_width_adapter_src_data),                   //          .data
		.sink0_channel         (ddr3_hps_f2h_sdram0_data_cmd_width_adapter_src_channel),                //          .channel
		.sink0_startofpacket   (ddr3_hps_f2h_sdram0_data_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (ddr3_hps_f2h_sdram0_data_cmd_width_adapter_src_endofpacket),            //          .endofpacket
		.sink0_ready           (ddr3_hps_f2h_sdram0_data_cmd_width_adapter_src_ready),                  //          .ready
		.source0_valid         (ddr3_hps_f2h_sdram0_data_burst_adapter_source0_valid),                  //   source0.valid
		.source0_data          (ddr3_hps_f2h_sdram0_data_burst_adapter_source0_data),                   //          .data
		.source0_channel       (ddr3_hps_f2h_sdram0_data_burst_adapter_source0_channel),                //          .channel
		.source0_startofpacket (ddr3_hps_f2h_sdram0_data_burst_adapter_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (ddr3_hps_f2h_sdram0_data_burst_adapter_source0_endofpacket),            //          .endofpacket
		.source0_ready         (ddr3_hps_f2h_sdram0_data_burst_adapter_source0_ready)                   //          .ready
	);

	UAB_RV_System_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_clk_clk),                                 //       clk.clk
		.reset              (UABChip_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                            //      sink.ready
		.sink_channel       (router_src_channel),                          //          .channel
		.sink_data          (router_src_data),                             //          .data
		.sink_startofpacket (router_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_src_valid),                            //          .valid
		.src0_ready         (cmd_demux_src0_ready),                        //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                        //          .valid
		.src0_data          (cmd_demux_src0_data),                         //          .data
		.src0_channel       (cmd_demux_src0_channel),                      //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                   //          .endofpacket
	);

	UAB_RV_System_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_clk_clk),                                 //       clk.clk
		.reset              (UABChip_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                        //      sink.ready
		.sink_channel       (router_001_src_channel),                      //          .channel
		.sink_data          (router_001_src_data),                         //          .data
		.sink_startofpacket (router_001_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_001_src_valid),                        //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                    //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                    //          .valid
		.src0_data          (cmd_demux_001_src0_data),                     //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                  //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)               //          .endofpacket
	);

	UAB_RV_System_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (mem_pll_outclk0_clk),                                                   //       clk.clk
		.reset               (ddr3_hps_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                     //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                     //          .valid
		.src_data            (cmd_mux_src_data),                                                      //          .data
		.src_channel         (cmd_mux_src_channel),                                                   //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                               //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                                     //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                                     //          .valid
		.sink0_channel       (crosser_out_channel),                                                   //          .channel
		.sink0_data          (crosser_out_data),                                                      //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                                               //          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                                                 //     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                                                 //          .valid
		.sink1_channel       (crosser_001_out_channel),                                               //          .channel
		.sink1_data          (crosser_001_out_data),                                                  //          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket)                                            //          .endofpacket
	);

	UAB_RV_System_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (mem_pll_outclk0_clk),                                                   //       clk.clk
		.reset              (ddr3_hps_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ddr3_hps_f2h_sdram0_data_rsp_width_adapter_src_ready),                  //      sink.ready
		.sink_channel       (ddr3_hps_f2h_sdram0_data_rsp_width_adapter_src_channel),                //          .channel
		.sink_data          (ddr3_hps_f2h_sdram0_data_rsp_width_adapter_src_data),                   //          .data
		.sink_startofpacket (ddr3_hps_f2h_sdram0_data_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (ddr3_hps_f2h_sdram0_data_rsp_width_adapter_src_endofpacket),            //          .endofpacket
		.sink_valid         (ddr3_hps_f2h_sdram0_data_rsp_width_adapter_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                  //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                  //          .valid
		.src0_data          (rsp_demux_src0_data),                                                   //          .data
		.src0_channel       (rsp_demux_src0_channel),                                                //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                            //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                                  //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                                  //          .valid
		.src1_data          (rsp_demux_src1_data),                                                   //          .data
		.src1_channel       (rsp_demux_src1_channel),                                                //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                             //          .endofpacket
	);

	UAB_RV_System_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_clk_clk),                                 //       clk.clk
		.reset               (UABChip_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                           //       src.ready
		.src_valid           (rsp_mux_src_valid),                           //          .valid
		.src_data            (rsp_mux_src_data),                            //          .data
		.src_channel         (rsp_mux_src_channel),                         //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                       //          .valid
		.sink0_channel       (crosser_002_out_channel),                     //          .channel
		.sink0_data          (crosser_002_out_data),                        //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                  //          .endofpacket
	);

	UAB_RV_System_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_clk_clk),                                 //       clk.clk
		.reset               (UABChip_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                       //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                       //          .valid
		.src_data            (rsp_mux_001_src_data),                        //          .data
		.src_channel         (rsp_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                       //          .valid
		.sink0_channel       (crosser_003_out_channel),                     //          .channel
		.sink0_data          (crosser_003_out_data),                        //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)                  //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (194),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (201),
		.IN_PKT_BURSTWRAP_L            (195),
		.IN_PKT_BURST_SIZE_H           (204),
		.IN_PKT_BURST_SIZE_L           (202),
		.IN_PKT_RESPONSE_STATUS_H      (228),
		.IN_PKT_RESPONSE_STATUS_L      (227),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (206),
		.IN_PKT_BURST_TYPE_L           (205),
		.IN_PKT_ORI_BURST_SIZE_L       (229),
		.IN_PKT_ORI_BURST_SIZE_H       (231),
		.IN_ST_DATA_W                  (232),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (86),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (96),
		.OUT_PKT_BURST_SIZE_L          (94),
		.OUT_PKT_RESPONSE_STATUS_H     (120),
		.OUT_PKT_RESPONSE_STATUS_L     (119),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (98),
		.OUT_PKT_BURST_TYPE_L          (97),
		.OUT_PKT_ORI_BURST_SIZE_L      (121),
		.OUT_PKT_ORI_BURST_SIZE_H      (123),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ddr3_hps_f2h_sdram0_data_rsp_width_adapter (
		.clk                  (mem_pll_outclk0_clk),                                                   //       clk.clk
		.reset                (ddr3_hps_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_002_src_valid),                                                  //      sink.valid
		.in_channel           (router_002_src_channel),                                                //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                            //          .endofpacket
		.in_ready             (router_002_src_ready),                                                  //          .ready
		.in_data              (router_002_src_data),                                                   //          .data
		.out_endofpacket      (ddr3_hps_f2h_sdram0_data_rsp_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (ddr3_hps_f2h_sdram0_data_rsp_width_adapter_src_data),                   //          .data
		.out_channel          (ddr3_hps_f2h_sdram0_data_rsp_width_adapter_src_channel),                //          .channel
		.out_valid            (ddr3_hps_f2h_sdram0_data_rsp_width_adapter_src_valid),                  //          .valid
		.out_ready            (ddr3_hps_f2h_sdram0_data_rsp_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (ddr3_hps_f2h_sdram0_data_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (86),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (93),
		.IN_PKT_BURSTWRAP_L            (87),
		.IN_PKT_BURST_SIZE_H           (96),
		.IN_PKT_BURST_SIZE_L           (94),
		.IN_PKT_RESPONSE_STATUS_H      (120),
		.IN_PKT_RESPONSE_STATUS_L      (119),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (98),
		.IN_PKT_BURST_TYPE_L           (97),
		.IN_PKT_ORI_BURST_SIZE_L       (121),
		.IN_PKT_ORI_BURST_SIZE_H       (123),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (194),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (204),
		.OUT_PKT_BURST_SIZE_L          (202),
		.OUT_PKT_RESPONSE_STATUS_H     (228),
		.OUT_PKT_RESPONSE_STATUS_L     (227),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (206),
		.OUT_PKT_BURST_TYPE_L          (205),
		.OUT_PKT_ORI_BURST_SIZE_L      (229),
		.OUT_PKT_ORI_BURST_SIZE_H      (231),
		.OUT_ST_DATA_W                 (232),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ddr3_hps_f2h_sdram0_data_cmd_width_adapter (
		.clk                  (mem_pll_outclk0_clk),                                                   //       clk.clk
		.reset                (ddr3_hps_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                     //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                   //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                               //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                     //          .ready
		.in_data              (cmd_mux_src_data),                                                      //          .data
		.out_endofpacket      (ddr3_hps_f2h_sdram0_data_cmd_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (ddr3_hps_f2h_sdram0_data_cmd_width_adapter_src_data),                   //          .data
		.out_channel          (ddr3_hps_f2h_sdram0_data_cmd_width_adapter_src_channel),                //          .channel
		.out_valid            (ddr3_hps_f2h_sdram0_data_cmd_width_adapter_src_valid),                  //          .valid
		.out_ready            (ddr3_hps_f2h_sdram0_data_cmd_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (ddr3_hps_f2h_sdram0_data_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_clk_clk),                                                           //        in_clk.clk
		.in_reset          (UABChip_0_reset_reset_bridge_in_reset_reset),                           //  in_clk_reset.reset
		.out_clk           (mem_pll_outclk0_clk),                                                   //       out_clk.clk
		.out_reset         (ddr3_hps_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                                  //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                                  //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                          //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                            //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                                //              .channel
		.in_data           (cmd_demux_src0_data),                                                   //              .data
		.out_ready         (crosser_out_ready),                                                     //           out.ready
		.out_valid         (crosser_out_valid),                                                     //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                             //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                               //              .endofpacket
		.out_channel       (crosser_out_channel),                                                   //              .channel
		.out_data          (crosser_out_data),                                                      //              .data
		.in_empty          (1'b0),                                                                  //   (terminated)
		.in_error          (1'b0),                                                                  //   (terminated)
		.out_empty         (),                                                                      //   (terminated)
		.out_error         ()                                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_clk_clk),                                                           //        in_clk.clk
		.in_reset          (UABChip_0_reset_reset_bridge_in_reset_reset),                           //  in_clk_reset.reset
		.out_clk           (mem_pll_outclk0_clk),                                                   //       out_clk.clk
		.out_reset         (ddr3_hps_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                              //            in.ready
		.in_valid          (cmd_demux_001_src0_valid),                                              //              .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                                      //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                                        //              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                                            //              .channel
		.in_data           (cmd_demux_001_src0_data),                                               //              .data
		.out_ready         (crosser_001_out_ready),                                                 //           out.ready
		.out_valid         (crosser_001_out_valid),                                                 //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                         //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                           //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                               //              .channel
		.out_data          (crosser_001_out_data),                                                  //              .data
		.in_empty          (1'b0),                                                                  //   (terminated)
		.in_error          (1'b0),                                                                  //   (terminated)
		.out_empty         (),                                                                      //   (terminated)
		.out_error         ()                                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (mem_pll_outclk0_clk),                                                   //        in_clk.clk
		.in_reset          (ddr3_hps_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_clk_clk),                                                           //       out_clk.clk
		.out_reset         (UABChip_0_reset_reset_bridge_in_reset_reset),                           // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                                  //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                                  //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                          //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                            //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                                //              .channel
		.in_data           (rsp_demux_src0_data),                                                   //              .data
		.out_ready         (crosser_002_out_ready),                                                 //           out.ready
		.out_valid         (crosser_002_out_valid),                                                 //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                         //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                           //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                               //              .channel
		.out_data          (crosser_002_out_data),                                                  //              .data
		.in_empty          (1'b0),                                                                  //   (terminated)
		.in_error          (1'b0),                                                                  //   (terminated)
		.out_empty         (),                                                                      //   (terminated)
		.out_error         ()                                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (mem_pll_outclk0_clk),                                                   //        in_clk.clk
		.in_reset          (ddr3_hps_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_clk_clk),                                                           //       out_clk.clk
		.out_reset         (UABChip_0_reset_reset_bridge_in_reset_reset),                           // out_clk_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                                  //            in.ready
		.in_valid          (rsp_demux_src1_valid),                                                  //              .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                                          //              .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                                            //              .endofpacket
		.in_channel        (rsp_demux_src1_channel),                                                //              .channel
		.in_data           (rsp_demux_src1_data),                                                   //              .data
		.out_ready         (crosser_003_out_ready),                                                 //           out.ready
		.out_valid         (crosser_003_out_valid),                                                 //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                         //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                           //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                               //              .channel
		.out_data          (crosser_003_out_data),                                                  //              .data
		.in_empty          (1'b0),                                                                  //   (terminated)
		.in_error          (1'b0),                                                                  //   (terminated)
		.out_empty         (),                                                                      //   (terminated)
		.out_error         ()                                                                       //   (terminated)
	);

	UAB_RV_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (mem_pll_outclk0_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (ddr3_hps_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ddr3_hps_f2h_sdram0_data_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (ddr3_hps_f2h_sdram0_data_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (ddr3_hps_f2h_sdram0_data_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                         //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                         //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                          //         .error
	);

endmodule
