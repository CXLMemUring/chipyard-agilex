	component intel_rtile_cxl_top_cxltyp2_ed is
		port (
			refclk0                           : in  std_logic                      := 'X';             -- clk
			refclk1                           : in  std_logic                      := 'X';             -- clk
			refclk4                           : in  std_logic                      := 'X';             -- clk
			resetn                            : in  std_logic                      := 'X';             -- reset_n
			nInit_done                        : in  std_logic                      := 'X';             -- ninit_done
			ip2hdm_clk                        : out std_logic;                                         -- clk
			ip2hdm_reset_n                    : out std_logic;                                         -- reset_n
			cxl_warm_rst_n                    : out std_logic;                                         -- reset_n
			cxl_cold_rst_n                    : out std_logic;                                         -- reset_n
			hdm_size_256mb                    : in  std_logic_vector(35 downto 0)  := (others => 'X'); -- hdm_size_t
			mc2ip_memsize                     : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- mem_size_t
			cxl_rx_n                          : in  std_logic_vector(15 downto 0)  := (others => 'X'); -- cxl_rx_n
			cxl_rx_p                          : in  std_logic_vector(15 downto 0)  := (others => 'X'); -- cxl_rx_p
			cxl_tx_n                          : out std_logic_vector(15 downto 0);                     -- cxl_tx_n
			cxl_tx_p                          : out std_logic_vector(15 downto 0);                     -- cxl_tx_p
			mc2ip_0_sr_status                 : in  std_logic_vector(4 downto 0)   := (others => 'X'); -- mc_sr_status
			mc2ip_0_rspfifo_full              : in  std_logic                      := 'X';             -- rspfifo_full
			mc2ip_0_rspfifo_empty             : in  std_logic                      := 'X';             -- rspfifo_empty
			mc2ip_0_rspfifo_fill_level        : in  std_logic_vector(5 downto 0)   := (others => 'X'); -- rspfifo_fill_level
			mc2ip_0_reqfifo_full              : in  std_logic                      := 'X';             -- reqfifo_full
			mc2ip_0_reqfifo_empty             : in  std_logic                      := 'X';             -- reqfifo_empty
			mc2ip_0_reqfifo_fill_level        : in  std_logic_vector(5 downto 0)   := (others => 'X'); -- reqfifo_fill_level
			hdm2ip_avmm0_cxlmem_ready         : in  std_logic                      := 'X';             -- cxlmem_ready
			hdm2ip_avmm0_ready                : in  std_logic                      := 'X';             -- ready
			hdm2ip_avmm0_readdata             : in  std_logic_vector(511 downto 0) := (others => 'X'); -- readdata
			hdm2ip_avmm0_rsp_mdata            : in  std_logic_vector(13 downto 0)  := (others => 'X'); -- rsp_mdata
			hdm2ip_avmm0_read_poison          : in  std_logic                      := 'X';             -- read_poison
			hdm2ip_avmm0_readdatavalid        : in  std_logic                      := 'X';             -- readdatavalid
			hdm2ip_avmm0_ecc_err_corrected    : in  std_logic_vector(7 downto 0)   := (others => 'X'); -- ecc_err_corrected
			hdm2ip_avmm0_ecc_err_detected     : in  std_logic_vector(7 downto 0)   := (others => 'X'); -- ecc_err_detected
			hdm2ip_avmm0_ecc_err_fatal        : in  std_logic_vector(7 downto 0)   := (others => 'X'); -- ecc_err_fatal
			hdm2ip_avmm0_ecc_err_syn_e        : in  std_logic_vector(7 downto 0)   := (others => 'X'); -- ecc_err_syn_e
			hdm2ip_avmm0_ecc_err_valid        : in  std_logic                      := 'X';             -- ecc_err_valid
			ip2hdm_avmm0_read                 : out std_logic;                                         -- read
			ip2hdm_avmm0_write                : out std_logic;                                         -- write
			ip2hdm_avmm0_write_poison         : out std_logic;                                         -- write_poison
			ip2hdm_avmm0_write_ras_sbe        : out std_logic;                                         -- write_ras_sbe
			ip2hdm_avmm0_write_ras_dbe        : out std_logic;                                         -- write_ras_dbe
			ip2hdm_avmm0_writedata            : out std_logic_vector(511 downto 0);                    -- writedata
			ip2hdm_avmm0_byteenable           : out std_logic_vector(63 downto 0);                     -- byteenable
			ip2hdm_avmm0_address              : out std_logic_vector(45 downto 0);                     -- address
			ip2hdm_avmm0_req_mdata            : out std_logic_vector(13 downto 0);                     -- req_mdata
			mc2ip_1_sr_status                 : in  std_logic_vector(4 downto 0)   := (others => 'X'); -- mc_sr_status
			mc2ip_1_rspfifo_full              : in  std_logic                      := 'X';             -- rspfifo_full
			mc2ip_1_rspfifo_empty             : in  std_logic                      := 'X';             -- rspfifo_empty
			mc2ip_1_rspfifo_fill_level        : in  std_logic_vector(5 downto 0)   := (others => 'X'); -- rspfifo_fill_level
			mc2ip_1_reqfifo_full              : in  std_logic                      := 'X';             -- reqfifo_full
			mc2ip_1_reqfifo_empty             : in  std_logic                      := 'X';             -- reqfifo_empty
			mc2ip_1_reqfifo_fill_level        : in  std_logic_vector(5 downto 0)   := (others => 'X'); -- reqfifo_fill_level
			hdm2ip_avmm1_cxlmem_ready         : in  std_logic                      := 'X';             -- cxlmem_ready
			hdm2ip_avmm1_ready                : in  std_logic                      := 'X';             -- ready
			hdm2ip_avmm1_readdata             : in  std_logic_vector(511 downto 0) := (others => 'X'); -- readdata
			hdm2ip_avmm1_rsp_mdata            : in  std_logic_vector(13 downto 0)  := (others => 'X'); -- rsp_mdata
			hdm2ip_avmm1_read_poison          : in  std_logic                      := 'X';             -- read_poison
			hdm2ip_avmm1_readdatavalid        : in  std_logic                      := 'X';             -- readdatavalid
			hdm2ip_avmm1_ecc_err_corrected    : in  std_logic_vector(7 downto 0)   := (others => 'X'); -- ecc_err_corrected
			hdm2ip_avmm1_ecc_err_detected     : in  std_logic_vector(7 downto 0)   := (others => 'X'); -- ecc_err_detected
			hdm2ip_avmm1_ecc_err_fatal        : in  std_logic_vector(7 downto 0)   := (others => 'X'); -- ecc_err_fatal
			hdm2ip_avmm1_ecc_err_syn_e        : in  std_logic_vector(7 downto 0)   := (others => 'X'); -- ecc_err_syn_e
			hdm2ip_avmm1_ecc_err_valid        : in  std_logic                      := 'X';             -- ecc_err_valid
			ip2hdm_avmm1_read                 : out std_logic;                                         -- read
			ip2hdm_avmm1_write                : out std_logic;                                         -- write
			ip2hdm_avmm1_write_poison         : out std_logic;                                         -- write_poison
			ip2hdm_avmm1_write_ras_sbe        : out std_logic;                                         -- write_ras_sbe
			ip2hdm_avmm1_write_ras_dbe        : out std_logic;                                         -- write_ras_dbe
			ip2hdm_avmm1_writedata            : out std_logic_vector(511 downto 0);                    -- writedata
			ip2hdm_avmm1_byteenable           : out std_logic_vector(63 downto 0);                     -- byteenable
			ip2hdm_avmm1_address              : out std_logic_vector(45 downto 0);                     -- address
			ip2hdm_avmm1_req_mdata            : out std_logic_vector(13 downto 0);                     -- req_mdata
			afu_cam_ext5                      : in  std_logic                      := 'X';             -- ext5
			afu_cam_ext6                      : in  std_logic                      := 'X';             -- ext6
			cam_afu_ext5                      : out std_logic;                                         -- ext5
			cam_afu_ext6                      : out std_logic;                                         -- ext6
			resetprep_en                      : out std_logic;                                         -- resetprep_en
			bfe_afu_quiesce_req               : out std_logic;                                         -- quiesce_req
			afu_bfe_quiesce_ack               : in  std_logic                      := 'X';             -- quiesce_ack
			cafu2ip_aximm0_awid               : in  std_logic_vector(11 downto 0)  := (others => 'X'); -- awid
			cafu2ip_aximm0_awaddr             : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- awaddr
			cafu2ip_aximm0_awlen              : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- awlen
			cafu2ip_aximm0_awsize             : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- awsize
			cafu2ip_aximm0_awburst            : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- awburst
			cafu2ip_aximm0_awprot             : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- awprot
			cafu2ip_aximm0_awqos              : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- awqos
			cafu2ip_aximm0_awuser             : in  std_logic_vector(4 downto 0)   := (others => 'X'); -- awuser
			cafu2ip_aximm0_awvalid            : in  std_logic                      := 'X';             -- awvalid
			cafu2ip_aximm0_awcache            : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- awcache
			cafu2ip_aximm0_awlock             : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- awlock
			cafu2ip_aximm0_awregion           : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- awregion
			ip2cafu_aximm0_awready            : out std_logic;                                         -- awready
			cafu2ip_aximm1_awid               : in  std_logic_vector(11 downto 0)  := (others => 'X'); -- awid
			cafu2ip_aximm1_awaddr             : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- awaddr
			cafu2ip_aximm1_awlen              : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- awlen
			cafu2ip_aximm1_awsize             : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- awsize
			cafu2ip_aximm1_awburst            : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- awburst
			cafu2ip_aximm1_awprot             : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- awprot
			cafu2ip_aximm1_awqos              : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- awqos
			cafu2ip_aximm1_awuser             : in  std_logic_vector(4 downto 0)   := (others => 'X'); -- awuser
			cafu2ip_aximm1_awvalid            : in  std_logic                      := 'X';             -- awvalid
			cafu2ip_aximm1_awcache            : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- awcache
			cafu2ip_aximm1_awlock             : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- awlock
			cafu2ip_aximm1_awregion           : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- awregion
			ip2cafu_aximm1_awready            : out std_logic;                                         -- awready
			cafu2ip_aximm0_wdata              : in  std_logic_vector(511 downto 0) := (others => 'X'); -- wdata
			cafu2ip_aximm0_wstrb              : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- wstrb
			cafu2ip_aximm0_wlast              : in  std_logic                      := 'X';             -- wlast
			cafu2ip_aximm0_wuser              : in  std_logic                      := 'X';             -- wuser
			cafu2ip_aximm0_wvalid             : in  std_logic                      := 'X';             -- wvalid
			ip2cafu_aximm0_wready             : out std_logic;                                         -- wready
			cafu2ip_aximm1_wdata              : in  std_logic_vector(511 downto 0) := (others => 'X'); -- wdata
			cafu2ip_aximm1_wstrb              : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- wstrb
			cafu2ip_aximm1_wlast              : in  std_logic                      := 'X';             -- wlast
			cafu2ip_aximm1_wuser              : in  std_logic                      := 'X';             -- wuser
			cafu2ip_aximm1_wvalid             : in  std_logic                      := 'X';             -- wvalid
			ip2cafu_aximm1_wready             : out std_logic;                                         -- wready
			ip2cafu_aximm0_bid                : out std_logic_vector(11 downto 0);                     -- bid
			ip2cafu_aximm0_bresp              : out std_logic_vector(1 downto 0);                      -- bresp
			ip2cafu_aximm0_buser              : out std_logic_vector(3 downto 0);                      -- buser
			ip2cafu_aximm0_bvalid             : out std_logic;                                         -- bvalid
			cafu2ip_aximm0_bready             : in  std_logic                      := 'X';             -- bready
			ip2cafu_aximm1_bid                : out std_logic_vector(11 downto 0);                     -- bid
			ip2cafu_aximm1_bresp              : out std_logic_vector(1 downto 0);                      -- bresp
			ip2cafu_aximm1_buser              : out std_logic_vector(3 downto 0);                      -- buser
			ip2cafu_aximm1_bvalid             : out std_logic;                                         -- bvalid
			cafu2ip_aximm1_bready             : in  std_logic                      := 'X';             -- bready
			cafu2ip_aximm0_arid               : in  std_logic_vector(11 downto 0)  := (others => 'X'); -- arid
			cafu2ip_aximm0_araddr             : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- araddr
			cafu2ip_aximm0_arlen              : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- arlen
			cafu2ip_aximm0_arsize             : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- arsize
			cafu2ip_aximm0_arburst            : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- arburst
			cafu2ip_aximm0_arprot             : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- arprot
			cafu2ip_aximm0_arqos              : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- arqos
			cafu2ip_aximm0_aruser             : in  std_logic_vector(4 downto 0)   := (others => 'X'); -- aruser
			cafu2ip_aximm0_arvalid            : in  std_logic                      := 'X';             -- arvalid
			cafu2ip_aximm0_arcache            : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- arcache
			cafu2ip_aximm0_arlock             : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- arlock
			cafu2ip_aximm0_arregion           : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- arregion
			ip2cafu_aximm0_arready            : out std_logic;                                         -- arready
			cafu2ip_aximm1_arid               : in  std_logic_vector(11 downto 0)  := (others => 'X'); -- arid
			cafu2ip_aximm1_araddr             : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- araddr
			cafu2ip_aximm1_arlen              : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- arlen
			cafu2ip_aximm1_arsize             : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- arsize
			cafu2ip_aximm1_arburst            : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- arburst
			cafu2ip_aximm1_arprot             : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- arprot
			cafu2ip_aximm1_arqos              : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- arqos
			cafu2ip_aximm1_aruser             : in  std_logic_vector(4 downto 0)   := (others => 'X'); -- aruser
			cafu2ip_aximm1_arvalid            : in  std_logic                      := 'X';             -- arvalid
			cafu2ip_aximm1_arcache            : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- arcache
			cafu2ip_aximm1_arlock             : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- arlock
			cafu2ip_aximm1_arregion           : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- arregion
			ip2cafu_aximm1_arready            : out std_logic;                                         -- arready
			ip2cafu_aximm0_rid                : out std_logic_vector(11 downto 0);                     -- rid
			ip2cafu_aximm0_rdata              : out std_logic_vector(511 downto 0);                    -- rdata
			ip2cafu_aximm0_rresp              : out std_logic_vector(1 downto 0);                      -- rresp
			ip2cafu_aximm0_rlast              : out std_logic;                                         -- rlast
			ip2cafu_aximm0_ruser              : out std_logic;                                         -- ruser
			ip2cafu_aximm0_rvalid             : out std_logic;                                         -- rvalid
			cafu2ip_aximm0_rready             : in  std_logic                      := 'X';             -- rready
			ip2cafu_aximm1_rid                : out std_logic_vector(11 downto 0);                     -- rid
			ip2cafu_aximm1_rdata              : out std_logic_vector(511 downto 0);                    -- rdata
			ip2cafu_aximm1_rresp              : out std_logic_vector(1 downto 0);                      -- rresp
			ip2cafu_aximm1_rlast              : out std_logic;                                         -- rlast
			ip2cafu_aximm1_ruser              : out std_logic;                                         -- ruser
			ip2cafu_aximm1_rvalid             : out std_logic;                                         -- rvalid
			cafu2ip_aximm1_rready             : in  std_logic                      := 'X';             -- rready
			ip2csr_avmm_clk                   : out std_logic;                                         -- clk
			ip2csr_avmm_rstn                  : out std_logic;                                         -- rst_n
			csr2ip_avmm_waitrequest           : in  std_logic                      := 'X';             -- waitrequest
			csr2ip_avmm_readdata              : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- readdata
			csr2ip_avmm_readdatavalid         : in  std_logic                      := 'X';             -- readdatavalid
			ip2csr_avmm_writedata             : out std_logic_vector(31 downto 0);                     -- writedata
			ip2csr_avmm_address               : out std_logic_vector(21 downto 0);                     -- address
			ip2csr_avmm_write                 : out std_logic;                                         -- write
			ip2csr_avmm_read                  : out std_logic;                                         -- read
			ip2csr_avmm_byteenable            : out std_logic_vector(3 downto 0);                      -- byteenable
			ip2cafu_avmm_clk                  : out std_logic;                                         -- clk
			ip2cafu_avmm_rstn                 : out std_logic;                                         -- rstn
			cafu2ip_avmm_waitrequest          : in  std_logic                      := 'X';             -- waitrequest
			cafu2ip_avmm_readdata             : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- readdata
			cafu2ip_avmm_readdatavalid        : in  std_logic                      := 'X';             -- readdatavalid
			ip2cafu_avmm_burstcount           : out std_logic;                                         -- burstcount
			ip2cafu_avmm_writedata            : out std_logic_vector(63 downto 0);                     -- writedata
			ip2cafu_avmm_address              : out std_logic_vector(21 downto 0);                     -- address
			ip2cafu_avmm_write                : out std_logic;                                         -- write
			ip2cafu_avmm_read                 : out std_logic;                                         -- read
			ip2cafu_avmm_byteenable           : out std_logic_vector(7 downto 0);                      -- byteenable
			ccv_afu_conf_base_addr_high       : out std_logic_vector(31 downto 0);                     -- base_addr_high
			ccv_afu_conf_base_addr_high_valid : out std_logic;                                         -- base_addr_high_valid
			ccv_afu_conf_base_addr_low        : out std_logic_vector(31 downto 0);                     -- base_addr_low
			ccv_afu_conf_base_addr_low_valid  : out std_logic;                                         -- base_addr_low_valid
			ip2uio_tx_ready                   : out std_logic;                                         -- ready
			uio2ip_tx_st0_dvalid              : in  std_logic                      := 'X';             -- dvalid
			uio2ip_tx_st0_sop                 : in  std_logic                      := 'X';             -- sop
			uio2ip_tx_st0_eop                 : in  std_logic                      := 'X';             -- eop
			uio2ip_tx_st0_passthrough         : in  std_logic                      := 'X';             -- passthrough
			uio2ip_tx_st0_data                : in  std_logic_vector(255 downto 0) := (others => 'X'); -- data
			uio2ip_tx_st0_data_parity         : in  std_logic_vector(7 downto 0)   := (others => 'X'); -- data_parity
			uio2ip_tx_st0_hdr                 : in  std_logic_vector(127 downto 0) := (others => 'X'); -- hdr
			uio2ip_tx_st0_hdr_parity          : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- hdr_parity
			uio2ip_tx_st0_hvalid              : in  std_logic                      := 'X';             -- hvalid
			uio2ip_tx_st0_prefix              : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- prefix
			uio2ip_tx_st0_prefix_parity       : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- prefix_parity
			uio2ip_tx_st0_RSSAI_prefix        : in  std_logic_vector(11 downto 0)  := (others => 'X'); -- RSSAI_prefix
			uio2ip_tx_st0_RSSAI_prefix_parity : in  std_logic                      := 'X';             -- RSSAI_prefix_parity
			uio2ip_tx_st0_pvalid              : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- pvalid
			uio2ip_tx_st0_vfactive            : in  std_logic                      := 'X';             -- vfactive
			uio2ip_tx_st0_vfnum               : in  std_logic_vector(10 downto 0)  := (others => 'X'); -- vfnum
			uio2ip_tx_st0_pfnum               : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- pfnum
			uio2ip_tx_st0_chnum               : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- chnum
			uio2ip_tx_st0_empty               : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- empty
			uio2ip_tx_st0_misc_parity         : in  std_logic                      := 'X';             -- misc_parity
			uio2ip_tx_st1_dvalid              : in  std_logic                      := 'X';             -- dvalid
			uio2ip_tx_st1_sop                 : in  std_logic                      := 'X';             -- sop
			uio2ip_tx_st1_eop                 : in  std_logic                      := 'X';             -- eop
			uio2ip_tx_st1_passthrough         : in  std_logic                      := 'X';             -- passthrough
			uio2ip_tx_st1_data                : in  std_logic_vector(255 downto 0) := (others => 'X'); -- data
			uio2ip_tx_st1_data_parity         : in  std_logic_vector(7 downto 0)   := (others => 'X'); -- data_parity
			uio2ip_tx_st1_hdr                 : in  std_logic_vector(127 downto 0) := (others => 'X'); -- hdr
			uio2ip_tx_st1_hdr_parity          : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- hdr_parity
			uio2ip_tx_st1_hvalid              : in  std_logic                      := 'X';             -- hvalid
			uio2ip_tx_st1_prefix              : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- prefix
			uio2ip_tx_st1_prefix_parity       : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- prefix_parity
			uio2ip_tx_st1_RSSAI_prefix        : in  std_logic_vector(11 downto 0)  := (others => 'X'); -- RSSAI_prefix
			uio2ip_tx_st1_RSSAI_prefix_parity : in  std_logic                      := 'X';             -- RSSAI_prefix_parity
			uio2ip_tx_st1_pvalid              : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- pvalid
			uio2ip_tx_st1_vfactive            : in  std_logic                      := 'X';             -- vfactive
			uio2ip_tx_st1_vfnum               : in  std_logic_vector(10 downto 0)  := (others => 'X'); -- vfnum
			uio2ip_tx_st1_pfnum               : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- pfnum
			uio2ip_tx_st1_chnum               : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- chnum
			uio2ip_tx_st1_empty               : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- empty
			uio2ip_tx_st1_misc_parity         : in  std_logic                      := 'X';             -- misc_parity
			uio2ip_tx_st2_dvalid              : in  std_logic                      := 'X';             -- dvalid
			uio2ip_tx_st2_sop                 : in  std_logic                      := 'X';             -- sop
			uio2ip_tx_st2_eop                 : in  std_logic                      := 'X';             -- eop
			uio2ip_tx_st2_passthrough         : in  std_logic                      := 'X';             -- passthrough
			uio2ip_tx_st2_data                : in  std_logic_vector(255 downto 0) := (others => 'X'); -- data
			uio2ip_tx_st2_data_parity         : in  std_logic_vector(7 downto 0)   := (others => 'X'); -- data_parity
			uio2ip_tx_st2_hdr                 : in  std_logic_vector(127 downto 0) := (others => 'X'); -- hdr
			uio2ip_tx_st2_hdr_parity          : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- hdr_parity
			uio2ip_tx_st2_hvalid              : in  std_logic                      := 'X';             -- hvalid
			uio2ip_tx_st2_prefix              : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- prefix
			uio2ip_tx_st2_prefix_parity       : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- prefix_parity
			uio2ip_tx_st2_RSSAI_prefix        : in  std_logic_vector(11 downto 0)  := (others => 'X'); -- RSSAI_prefix
			uio2ip_tx_st2_RSSAI_prefix_parity : in  std_logic                      := 'X';             -- RSSAI_prefix_parity
			uio2ip_tx_st2_pvalid              : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- pvalid
			uio2ip_tx_st2_vfactive            : in  std_logic                      := 'X';             -- vfactive
			uio2ip_tx_st2_vfnum               : in  std_logic_vector(10 downto 0)  := (others => 'X'); -- vfnum
			uio2ip_tx_st2_pfnum               : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- pfnum
			uio2ip_tx_st2_chnum               : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- chnum
			uio2ip_tx_st2_empty               : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- empty
			uio2ip_tx_st2_misc_parity         : in  std_logic                      := 'X';             -- misc_parity
			uio2ip_tx_st3_dvalid              : in  std_logic                      := 'X';             -- dvalid
			uio2ip_tx_st3_sop                 : in  std_logic                      := 'X';             -- sop
			uio2ip_tx_st3_eop                 : in  std_logic                      := 'X';             -- eop
			uio2ip_tx_st3_passthrough         : in  std_logic                      := 'X';             -- passthrough
			uio2ip_tx_st3_data                : in  std_logic_vector(255 downto 0) := (others => 'X'); -- data
			uio2ip_tx_st3_data_parity         : in  std_logic_vector(7 downto 0)   := (others => 'X'); -- data_parity
			uio2ip_tx_st3_hdr                 : in  std_logic_vector(127 downto 0) := (others => 'X'); -- hdr
			uio2ip_tx_st3_hdr_parity          : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- hdr_parity
			uio2ip_tx_st3_hvalid              : in  std_logic                      := 'X';             -- hvalid
			uio2ip_tx_st3_prefix              : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- prefix
			uio2ip_tx_st3_prefix_parity       : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- prefix_parity
			uio2ip_tx_st3_RSSAI_prefix        : in  std_logic_vector(11 downto 0)  := (others => 'X'); -- RSSAI_prefix
			uio2ip_tx_st3_RSSAI_prefix_parity : in  std_logic                      := 'X';             -- RSSAI_prefix_parity
			uio2ip_tx_st3_pvalid              : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- pvalid
			uio2ip_tx_st3_vfactive            : in  std_logic                      := 'X';             -- vfactive
			uio2ip_tx_st3_vfnum               : in  std_logic_vector(10 downto 0)  := (others => 'X'); -- vfnum
			uio2ip_tx_st3_pfnum               : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- pfnum
			uio2ip_tx_st3_chnum               : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- chnum
			uio2ip_tx_st3_empty               : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- empty
			uio2ip_tx_st3_misc_parity         : in  std_logic                      := 'X';             -- misc_parity
			ip2uio_tx_st_Hcrdt_update         : out std_logic_vector(2 downto 0);                      -- Hcrdt_update
			ip2uio_tx_st_Hcrdt_ch             : out std_logic_vector(0 downto 0);                      -- Hcrdt_ch
			ip2uio_tx_st_Hcrdt_update_cnt     : out std_logic_vector(5 downto 0);                      -- Hcrdt_update_cnt
			ip2uio_tx_st_Hcrdt_init           : out std_logic_vector(2 downto 0);                      -- Hcrdt_init
			uio2ip_tx_st_Hcrdt_init_ack       : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- Hcrdt_init_ack
			ip2uio_tx_st_Dcrdt_update         : out std_logic_vector(2 downto 0);                      -- Dcrdt_update
			ip2uio_tx_st_Dcrdt_ch             : out std_logic_vector(0 downto 0);                      -- Dcrdt_ch
			ip2uio_tx_st_Dcrdt_update_cnt     : out std_logic_vector(11 downto 0);                     -- Dcrdt_update_cnt
			ip2uio_tx_st_Dcrdt_init           : out std_logic_vector(2 downto 0);                      -- Dcrdt_init
			uio2ip_tx_st_Dcrdt_init_ack       : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- Dcrdt_init_ack
			ip2uio_rx_st0_dvalid              : out std_logic;                                         -- dvalid
			ip2uio_rx_st0_sop                 : out std_logic;                                         -- sop
			ip2uio_rx_st0_eop                 : out std_logic;                                         -- eop
			ip2uio_rx_st0_passthrough         : out std_logic;                                         -- passthrough
			ip2uio_rx_st0_data                : out std_logic_vector(255 downto 0);                    -- data
			ip2uio_rx_st0_data_parity         : out std_logic_vector(7 downto 0);                      -- data_parity
			ip2uio_rx_st0_hdr                 : out std_logic_vector(127 downto 0);                    -- hdr
			ip2uio_rx_st0_hdr_parity          : out std_logic_vector(3 downto 0);                      -- hdr_parity
			ip2uio_rx_st0_hvalid              : out std_logic;                                         -- hvalid
			ip2uio_rx_st0_prefix              : out std_logic_vector(31 downto 0);                     -- prefix
			ip2uio_rx_st0_prefix_parity       : out std_logic_vector(0 downto 0);                      -- prefix_parity
			ip2uio_rx_st0_RSSAI_prefix        : out std_logic_vector(11 downto 0);                     -- RSSAI_prefix
			ip2uio_rx_st0_RSSAI_prefix_parity : out std_logic;                                         -- RSSAI_prefix_parity
			ip2uio_rx_st0_pvalid              : out std_logic_vector(1 downto 0);                      -- pvalid
			ip2uio_rx_st0_bar                 : out std_logic_vector(2 downto 0);                      -- bar
			ip2uio_rx_st0_vfactive            : out std_logic;                                         -- vfactive
			ip2uio_rx_st0_vfnum               : out std_logic_vector(10 downto 0);                     -- vfnum
			ip2uio_rx_st0_pfnum               : out std_logic_vector(2 downto 0);                      -- pfnum
			ip2uio_rx_st0_chnum               : out std_logic_vector(0 downto 0);                      -- chnum
			ip2uio_rx_st0_misc_parity         : out std_logic;                                         -- misc_parity
			ip2uio_rx_st0_empty               : out std_logic_vector(2 downto 0);                      -- empty
			ip2uio_rx_st1_dvalid              : out std_logic;                                         -- dvalid
			ip2uio_rx_st1_sop                 : out std_logic;                                         -- sop
			ip2uio_rx_st1_eop                 : out std_logic;                                         -- eop
			ip2uio_rx_st1_passthrough         : out std_logic;                                         -- passthrough
			ip2uio_rx_st1_data                : out std_logic_vector(255 downto 0);                    -- data
			ip2uio_rx_st1_data_parity         : out std_logic_vector(7 downto 0);                      -- data_parity
			ip2uio_rx_st1_hdr                 : out std_logic_vector(127 downto 0);                    -- hdr
			ip2uio_rx_st1_hdr_parity          : out std_logic_vector(3 downto 0);                      -- hdr_parity
			ip2uio_rx_st1_hvalid              : out std_logic;                                         -- hvalid
			ip2uio_rx_st1_prefix              : out std_logic_vector(31 downto 0);                     -- prefix
			ip2uio_rx_st1_prefix_parity       : out std_logic_vector(0 downto 0);                      -- prefix_parity
			ip2uio_rx_st1_RSSAI_prefix        : out std_logic_vector(11 downto 0);                     -- RSSAI_prefix
			ip2uio_rx_st1_RSSAI_prefix_parity : out std_logic;                                         -- RSSAI_prefix_parity
			ip2uio_rx_st1_pvalid              : out std_logic_vector(1 downto 0);                      -- pvalid
			ip2uio_rx_st1_bar                 : out std_logic_vector(2 downto 0);                      -- bar
			ip2uio_rx_st1_vfactive            : out std_logic;                                         -- vfactive
			ip2uio_rx_st1_vfnum               : out std_logic_vector(10 downto 0);                     -- vfnum
			ip2uio_rx_st1_pfnum               : out std_logic_vector(2 downto 0);                      -- pfnum
			ip2uio_rx_st1_chnum               : out std_logic_vector(0 downto 0);                      -- chnum
			ip2uio_rx_st1_misc_parity         : out std_logic;                                         -- misc_parity
			ip2uio_rx_st1_empty               : out std_logic_vector(2 downto 0);                      -- empty
			ip2uio_rx_st2_dvalid              : out std_logic;                                         -- dvalid
			ip2uio_rx_st2_sop                 : out std_logic;                                         -- sop
			ip2uio_rx_st2_eop                 : out std_logic;                                         -- eop
			ip2uio_rx_st2_passthrough         : out std_logic;                                         -- passthrough
			ip2uio_rx_st2_data                : out std_logic_vector(255 downto 0);                    -- data
			ip2uio_rx_st2_data_parity         : out std_logic_vector(7 downto 0);                      -- data_parity
			ip2uio_rx_st2_hdr                 : out std_logic_vector(127 downto 0);                    -- hdr
			ip2uio_rx_st2_hdr_parity          : out std_logic_vector(3 downto 0);                      -- hdr_parity
			ip2uio_rx_st2_hvalid              : out std_logic;                                         -- hvalid
			ip2uio_rx_st2_prefix              : out std_logic_vector(31 downto 0);                     -- prefix
			ip2uio_rx_st2_prefix_parity       : out std_logic_vector(0 downto 0);                      -- prefix_parity
			ip2uio_rx_st2_RSSAI_prefix        : out std_logic_vector(11 downto 0);                     -- RSSAI_prefix
			ip2uio_rx_st2_RSSAI_prefix_parity : out std_logic;                                         -- RSSAI_prefix_parity
			ip2uio_rx_st2_pvalid              : out std_logic_vector(1 downto 0);                      -- pvalid
			ip2uio_rx_st2_bar                 : out std_logic_vector(2 downto 0);                      -- bar
			ip2uio_rx_st2_vfactive            : out std_logic;                                         -- vfactive
			ip2uio_rx_st2_vfnum               : out std_logic_vector(10 downto 0);                     -- vfnum
			ip2uio_rx_st2_pfnum               : out std_logic_vector(2 downto 0);                      -- pfnum
			ip2uio_rx_st2_chnum               : out std_logic_vector(0 downto 0);                      -- chnum
			ip2uio_rx_st2_misc_parity         : out std_logic;                                         -- misc_parity
			ip2uio_rx_st2_empty               : out std_logic_vector(2 downto 0);                      -- empty
			ip2uio_rx_st3_dvalid              : out std_logic;                                         -- dvalid
			ip2uio_rx_st3_sop                 : out std_logic;                                         -- sop
			ip2uio_rx_st3_eop                 : out std_logic;                                         -- eop
			ip2uio_rx_st3_passthrough         : out std_logic;                                         -- passthrough
			ip2uio_rx_st3_data                : out std_logic_vector(255 downto 0);                    -- data
			ip2uio_rx_st3_data_parity         : out std_logic_vector(7 downto 0);                      -- data_parity
			ip2uio_rx_st3_hdr                 : out std_logic_vector(127 downto 0);                    -- hdr
			ip2uio_rx_st3_hdr_parity          : out std_logic_vector(3 downto 0);                      -- hdr_parity
			ip2uio_rx_st3_hvalid              : out std_logic;                                         -- hvalid
			ip2uio_rx_st3_prefix              : out std_logic_vector(31 downto 0);                     -- prefix
			ip2uio_rx_st3_prefix_parity       : out std_logic_vector(0 downto 0);                      -- prefix_parity
			ip2uio_rx_st3_RSSAI_prefix        : out std_logic_vector(11 downto 0);                     -- RSSAI_prefix
			ip2uio_rx_st3_RSSAI_prefix_parity : out std_logic;                                         -- RSSAI_prefix_parity
			ip2uio_rx_st3_pvalid              : out std_logic_vector(1 downto 0);                      -- pvalid
			ip2uio_rx_st3_bar                 : out std_logic_vector(2 downto 0);                      -- bar
			ip2uio_rx_st3_vfactive            : out std_logic;                                         -- vfactive
			ip2uio_rx_st3_vfnum               : out std_logic_vector(10 downto 0);                     -- vfnum
			ip2uio_rx_st3_pfnum               : out std_logic_vector(2 downto 0);                      -- pfnum
			ip2uio_rx_st3_chnum               : out std_logic_vector(0 downto 0);                      -- chnum
			ip2uio_rx_st3_misc_parity         : out std_logic;                                         -- misc_parity
			ip2uio_rx_st3_empty               : out std_logic_vector(2 downto 0);                      -- empty
			uio2ip_rx_st_Hcrdt_update         : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- Hcrdt_update
			uio2ip_rx_st_Hcrdt_ch             : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- Hcrdt_ch
			uio2ip_rx_st_Hcrdt_update_cnt     : in  std_logic_vector(5 downto 0)   := (others => 'X'); -- Hcrdt_update_cnt
			uio2ip_rx_st_Hcrdt_init           : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- Hcrdt_init
			ip2uio_rx_st_Hcrdt_init_ack       : out std_logic_vector(2 downto 0);                      -- Hcrdt_init_ack
			uio2ip_rx_st_Dcrdt_update         : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- Dcrdt_update
			uio2ip_rx_st_Dcrdt_ch             : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- Dcrdt_ch
			uio2ip_rx_st_Dcrdt_update_cnt     : in  std_logic_vector(11 downto 0)  := (others => 'X'); -- Dcrdt_update_cnt
			uio2ip_rx_st_Dcrdt_init           : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- Dcrdt_init
			ip2uio_rx_st_Dcrdt_init_ack       : out std_logic_vector(2 downto 0);                      -- Dcrdt_init_ack
			ip2uio_bus_number                 : out std_logic_vector(7 downto 0);                      -- usr_bus_number
			ip2uio_device_number              : out std_logic_vector(4 downto 0)                       -- usr_device_number
		);
	end component intel_rtile_cxl_top_cxltyp2_ed;

